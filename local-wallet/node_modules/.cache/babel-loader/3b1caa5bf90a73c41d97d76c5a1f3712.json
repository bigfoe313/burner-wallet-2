{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar promiseToCallback = require('promise-to-callback');\n\nmodule.exports = createAsyncMiddleware;\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return function (req, res, next, end) {\n    var nextDonePromise = null;\n    var finishedPromise = asyncMiddleware(req, res, getNextPromise);\n    promiseToCallback(finishedPromise)(function (err) {\n      // async middleware ended\n      if (nextDonePromise) {\n        // next handler was called - complete nextHandler\n        promiseToCallback(nextDonePromise)(function (nextErr, nextHandlerSignalDone) {\n          // nextErr is only present if something went really wrong\n          // if an error is thrown after `await next()` it appears as `err` and not `nextErr`\n          if (nextErr) {\n            console.error(nextErr);\n            return end(nextErr);\n          }\n\n          nextHandlerSignalDone(err);\n        });\n      } else {\n        // next handler was not called - complete middleware\n        end(err);\n      }\n    });\n\n    function getNextPromise() {\n      return _getNextPromise.apply(this, arguments);\n    }\n\n    function _getNextPromise() {\n      _getNextPromise = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nextDonePromise = getNextDoneCallback();\n                _context.next = 3;\n                return nextDonePromise;\n\n              case 3:\n                return _context.abrupt(\"return\", undefined);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getNextPromise.apply(this, arguments);\n    }\n\n    function getNextDoneCallback() {\n      return new Promise(function (resolve) {\n        next(function (cb) {\n          return resolve(cb);\n        });\n      });\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}