{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Web3 = require('web3');\n\nvar tabookey = require('@dmihal/tabookey-gasless');\n\nvar ProxyProvider = require('./ProxyProvider');\n\nvar EventEmitter = require('./lib/EventEmitter');\n\nvar History = require('./History');\n\nvar HistoryEvent = require('./HistoryEvent');\n\nvar TempSigner = require('./signers/TempSigner');\n\nvar BurnerCore =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function BurnerCore(_ref) {\n    var _this = this;\n\n    var _ref$signers = _ref.signers,\n        signers = _ref$signers === void 0 ? [] : _ref$signers,\n        _ref$gateways = _ref.gateways,\n        gateways = _ref$gateways === void 0 ? [] : _ref$gateways,\n        _ref$assets = _ref.assets,\n        assets = _ref$assets === void 0 ? [] : _ref$assets,\n        _ref$historyOptions = _ref.historyOptions,\n        historyOptions = _ref$historyOptions === void 0 ? {} : _ref$historyOptions,\n        _ref$gsnGasLimit = _ref.gsnGasLimit,\n        gsnGasLimit = _ref$gsnGasLimit === void 0 ? 5000000 : _ref$gsnGasLimit,\n        _ref$gsnGasPrice = _ref.gsnGasPrice,\n        gsnGasPrice = _ref$gsnGasPrice === void 0 ? 1100000000 : _ref$gsnGasPrice;\n\n    _classCallCheck(this, BurnerCore);\n\n    if (gateways.length === 0) {\n      throw new Error('Must include at least 1 gateway');\n    }\n\n    this.providers = {};\n    this.web3 = {};\n    this.gsnGasPrice = gsnGasPrice;\n    this.gsnGasLimit = gsnGasLimit;\n    this.events = new EventEmitter();\n    this.history = new History(_objectSpread({\n      assets: assets\n    }, historyOptions));\n    this.gateways = gateways;\n    this.gateways.forEach(function (gateway) {\n      return gateway.setCore(_this);\n    });\n    this.assets = assets;\n    this.assets.forEach(function (asset) {\n      asset.setCore(_this);\n      asset.start && asset.start();\n    });\n    this.signers = signers;\n    this.signers.push(new TempSigner());\n    this.unsubscribesBySigner = {};\n    this.signers.forEach(function (signer, index) {\n      signer.setCore(_this);\n      _this.unsubscribesBySigner[index] = _this.watchAccounts(signer.getAccounts());\n      signer.onAccountChange(function () {\n        _this.unsubscribesBySigner[index].forEach(function (unsubscribe) {\n          return unsubscribe();\n        });\n\n        _this.unsubscribesBySigner[index] = _this.watchAccounts(signer.getAccounts());\n\n        _this.events.emit('accountChange');\n      });\n    });\n  }\n\n  _createClass(BurnerCore, [{\n    key: \"watchAccounts\",\n    value: function watchAccounts(accounts) {\n      var unsubscribes = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = accounts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var account = _step.value;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = this.assets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var asset = _step2.value;\n              var unsubscribe = asset.startWatchingAddress(account);\n              unsubscribes.push(unsubscribe);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return unsubscribes;\n    }\n  }, {\n    key: \"onAccountChange\",\n    value: function onAccountChange(callback) {\n      var _this2 = this;\n\n      this.events.on('accountChange', function () {\n        return callback(_this2.getAccounts());\n      });\n    }\n  }, {\n    key: \"getAssets\",\n    value: function getAssets() {\n      return this.assets;\n    }\n  }, {\n    key: \"getAccounts\",\n    value: function getAccounts() {\n      var availableSigners = this.signers.filter(function (signer) {\n        return signer.isAvailable();\n      });\n      return [].concat.apply([], availableSigners.map(function (signer) {\n        return signer.getAccounts();\n      }));\n    }\n  }, {\n    key: \"signTx\",\n    value: function () {\n      var _signTx = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(txParams) {\n        var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, signer, signed;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iteratorNormalCompletion3 = true;\n                _didIteratorError3 = false;\n                _iteratorError3 = undefined;\n                _context.prev = 3;\n                _iterator3 = this.signers[Symbol.iterator]();\n\n              case 5:\n                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                  _context.next = 15;\n                  break;\n                }\n\n                signer = _step3.value;\n\n                if (!(signer.isAvailable() && signer.hasAccount(txParams.from))) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 10;\n                return signer.signTx(txParams);\n\n              case 10:\n                signed = _context.sent;\n                return _context.abrupt(\"return\", signed);\n\n              case 12:\n                _iteratorNormalCompletion3 = true;\n                _context.next = 5;\n                break;\n\n              case 15:\n                _context.next = 21;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](3);\n                _didIteratorError3 = true;\n                _iteratorError3 = _context.t0;\n\n              case 21:\n                _context.prev = 21;\n                _context.prev = 22;\n\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n\n              case 24:\n                _context.prev = 24;\n\n                if (!_didIteratorError3) {\n                  _context.next = 27;\n                  break;\n                }\n\n                throw _iteratorError3;\n\n              case 27:\n                return _context.finish(24);\n\n              case 28:\n                return _context.finish(21);\n\n              case 29:\n                throw new Error('Unable to find an appropriate signer');\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 17, 21, 29], [22,, 24, 28]]);\n      }));\n\n      function signTx(_x) {\n        return _signTx.apply(this, arguments);\n      }\n\n      return signTx;\n    }()\n  }, {\n    key: \"signMsg\",\n    value: function () {\n      var _signMsg = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(msg, account) {\n        var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, signer, signed;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iteratorNormalCompletion4 = true;\n                _didIteratorError4 = false;\n                _iteratorError4 = undefined;\n                _context2.prev = 3;\n                _iterator4 = this.signers[Symbol.iterator]();\n\n              case 5:\n                if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                signer = _step4.value;\n\n                if (!(signer.isAvailable() && signer.hasAccount(account))) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 10;\n                return signer.signMsg(msg, account);\n\n              case 10:\n                signed = _context2.sent;\n                return _context2.abrupt(\"return\", signed);\n\n              case 12:\n                _iteratorNormalCompletion4 = true;\n                _context2.next = 5;\n                break;\n\n              case 15:\n                _context2.next = 21;\n                break;\n\n              case 17:\n                _context2.prev = 17;\n                _context2.t0 = _context2[\"catch\"](3);\n                _didIteratorError4 = true;\n                _iteratorError4 = _context2.t0;\n\n              case 21:\n                _context2.prev = 21;\n                _context2.prev = 22;\n\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n\n              case 24:\n                _context2.prev = 24;\n\n                if (!_didIteratorError4) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                throw _iteratorError4;\n\n              case 27:\n                return _context2.finish(24);\n\n              case 28:\n                return _context2.finish(21);\n\n              case 29:\n                throw new Error('Unable to find an appropriate signer');\n\n              case 30:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 17, 21, 29], [22,, 24, 28]]);\n      }));\n\n      function signMsg(_x2, _x3) {\n        return _signMsg.apply(this, arguments);\n      }\n\n      return signMsg;\n    }()\n  }, {\n    key: \"shouldSkipSigning\",\n    value: function shouldSkipSigning(network, txParams) {\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this.signers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var signer = _step5.value;\n\n          if (signer.isAvailable() && signer.hasAccount(txParams.from)) {\n            return signer.shouldSkipSigning(network);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      throw new Error('Unable to find an appropriate signer');\n    }\n  }, {\n    key: \"handleRequest\",\n    value: function () {\n      var _handleRequest = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(network, payload) {\n        var _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, gateway, response;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iteratorNormalCompletion6 = true;\n                _didIteratorError6 = false;\n                _iteratorError6 = undefined;\n                _context3.prev = 3;\n                _iterator6 = this.gateways[Symbol.iterator]();\n\n              case 5:\n                if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                gateway = _step6.value;\n\n                if (!(gateway.isAvailable() && gateway.getNetworks().indexOf(network) !== -1)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                if (!(payload.method === 'eth_sendRawTransaction' && payload.params[0].signedTransaction)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                _context3.next = 11;\n                return gateway.sendTx(network, payload);\n\n              case 11:\n                _context3.t0 = _context3.sent;\n                _context3.next = 17;\n                break;\n\n              case 14:\n                _context3.next = 16;\n                return gateway.send(network, payload);\n\n              case 16:\n                _context3.t0 = _context3.sent;\n\n              case 17:\n                response = _context3.t0;\n                return _context3.abrupt(\"return\", response);\n\n              case 19:\n                _iteratorNormalCompletion6 = true;\n                _context3.next = 5;\n                break;\n\n              case 22:\n                _context3.next = 28;\n                break;\n\n              case 24:\n                _context3.prev = 24;\n                _context3.t1 = _context3[\"catch\"](3);\n                _didIteratorError6 = true;\n                _iteratorError6 = _context3.t1;\n\n              case 28:\n                _context3.prev = 28;\n                _context3.prev = 29;\n\n                if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n                  _iterator6.return();\n                }\n\n              case 31:\n                _context3.prev = 31;\n\n                if (!_didIteratorError6) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                throw _iteratorError6;\n\n              case 34:\n                return _context3.finish(31);\n\n              case 35:\n                return _context3.finish(28);\n\n              case 36:\n                throw new Error(\"Could not find gateway for network \".concat(network));\n\n              case 37:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 24, 28, 36], [29,, 31, 35]]);\n      }));\n\n      function handleRequest(_x4, _x5) {\n        return _handleRequest.apply(this, arguments);\n      }\n\n      return handleRequest;\n    }()\n  }, {\n    key: \"getProvider\",\n    value: function getProvider(network) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var cacheKey = options.gasless ? \"\".concat(network, \"-gasless\") : network;\n\n      if (this.providers[cacheKey]) {\n        return this.providers[cacheKey];\n      }\n\n      var provider = new ProxyProvider(network, this);\n\n      if (options.gasless) {\n        provider = new tabookey.RelayProvider(provider, {\n          txfee: 70,\n          force_gasLimit: this.gsnGasLimit,\n          force_gasPrice: this.gsnGasPrice\n        });\n      }\n\n      this.providers[cacheKey] = provider;\n      return provider;\n    }\n  }, {\n    key: \"getWeb3\",\n    value: function getWeb3(network) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var cacheKey = options.gasless ? \"\".concat(network, \"-gasless\") : network;\n\n      if (this.web3[cacheKey]) {\n        return this.web3[cacheKey];\n      }\n\n      this.web3[cacheKey] = new Web3(this.getProvider(network, options));\n      return this.web3[cacheKey];\n    }\n  }, {\n    key: \"canCallSigner\",\n    value: function canCallSigner(action, account) {\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = this.signers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var signer = _step7.value;\n\n          if (account === signer.id || signer.isAvailable() && signer.hasAccount(account)) {\n            return signer.permissions().indexOf(action) !== -1;\n          }\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"callSigner\",\n    value: function callSigner(action, account) {\n      for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        params[_key - 2] = arguments[_key];\n      }\n\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = this.signers[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var signer = _step8.value;\n\n          if (signer.isAvailable() && signer.hasAccount(account)) {\n            return signer.invoke.apply(signer, [action, account].concat(params));\n          }\n\n          if (account === signer.id) {\n            return signer.invoke.apply(signer, [action].concat(params));\n          }\n        }\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n\n      throw new Error(\"Unable to find signer for \".concat(account));\n    }\n  }, {\n    key: \"addHistoryEvent\",\n    value: function addHistoryEvent(eventProps) {\n      var event = new HistoryEvent(eventProps, this.assets);\n      this.history.addEvent(event);\n    }\n  }, {\n    key: \"getHistoryEvents\",\n    value: function getHistoryEvents(options) {\n      return this.history.getEvents(options);\n    }\n  }, {\n    key: \"onHistoryEvent\",\n    value: function onHistoryEvent(listener) {\n      this.history.onEvent(listener);\n    }\n  }, {\n    key: \"removeHistoryEventListener\",\n    value: function removeHistoryEventListener(listener) {\n      this.history.removeListener(listener);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      Object.values(this.providers).forEach(function (provider) {\n        return provider.stop();\n      });\n      Object.values(this.gateways).forEach(function (gateway) {\n        return gateway.stop();\n      });\n      this.assets.forEach(function (asset) {\n        return asset.stop && asset.stop();\n      });\n    }\n  }]);\n\n  return BurnerCore;\n}();\n\nmodule.exports = BurnerCore;","map":null,"metadata":{},"sourceType":"script"}