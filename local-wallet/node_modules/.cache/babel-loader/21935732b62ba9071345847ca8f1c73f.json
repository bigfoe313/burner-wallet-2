{"ast":null,"code":"import _defineProperty from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { withTranslation } from 'react-i18next';\nimport { DEFAULT_PLUGIN_DATA } from './Plugins';\nvar ZERO_ADDR = '0x0000000000000000000000000000000000000000';\n\nvar unavailable = function unavailable() {\n  throw new Error('Unavailable');\n};\n\nexport var context = React.createContext({\n  actions: {\n    callSigner: unavailable,\n    canCallSigner: unavailable,\n    navigateTo: unavailable,\n    openDefaultQRScanner: unavailable,\n    scanQRCode: unavailable,\n    safeSetPK: unavailable,\n    send: unavailable,\n    setLoading: unavailable,\n    getHistoryEvents: unavailable,\n    onHistoryEvent: unavailable,\n    removeHistoryEventListener: unavailable\n  },\n  assets: [],\n  accounts: [],\n  defaultAccount: ZERO_ADDR,\n  pluginData: DEFAULT_PLUGIN_DATA,\n  burnerComponents: {},\n  BurnerComponents: {},\n  completeScan: null,\n  loading: null,\n  t: function t(key) {\n    return key;\n  }\n});\nvar Provider = context.Provider,\n    Consumer = context.Consumer;\nvar ADDRESS_REGEX = /^(?:0x)?[0-9a-f]{40}$/i;\nvar PK_REGEX = /^(?:https?:\\/\\/[-a-z.]+\\/pk#)?((?:0x)?[0-9a-f]{64})$/i;\n\nvar BurnerProvider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BurnerProvider, _Component);\n\n  function BurnerProvider(props) {\n    var _this;\n\n    _classCallCheck(this, BurnerProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BurnerProvider).call(this, props));\n    _this.actions = {\n      canCallSigner: props.core.canCallSigner.bind(props.core),\n      callSigner: props.core.callSigner.bind(props.core),\n      openDefaultQRScanner: _this.openDefaultQRScanner.bind(_assertThisInitialized(_this)),\n      safeSetPK: function safeSetPK(newPK) {\n        return props.history.push('/pk', {\n          newPK: newPK\n        });\n      },\n      scanQRCode: _this.scanQRCode.bind(_assertThisInitialized(_this)),\n      send: _this.send.bind(_assertThisInitialized(_this)),\n      navigateTo: function navigateTo(location, state) {\n        return Number.isInteger(location) ? props.history.go(location) : props.history.push(location, state);\n      },\n      setLoading: function setLoading(status) {\n        return _this.setState({\n          loading: status\n        });\n      },\n      getHistoryEvents: function getHistoryEvents(options) {\n        return props.core.getHistoryEvents(options);\n      },\n      onHistoryEvent: function onHistoryEvent(cb) {\n        return props.core.onHistoryEvent(cb);\n      },\n      removeHistoryEventListener: function removeHistoryEventListener(cb) {\n        return props.core.removeHistoryEventListener(cb);\n      }\n    };\n    _this.state = {\n      accounts: [],\n      completeScan: null,\n      loading: null\n    };\n    return _this;\n  }\n\n  _createClass(BurnerProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        accounts: this.props.core.getAccounts()\n      });\n      this.props.core.onAccountChange(function (accounts) {\n        return _this2.setState({\n          accounts: accounts\n        });\n      });\n      this.props.pluginData.startup(this.getPluginActionContext());\n    }\n  }, {\n    key: \"getPluginActionContext\",\n    value: function getPluginActionContext() {\n      return {\n        actions: this.actions,\n        location: this.props.location\n      };\n    }\n  }, {\n    key: \"scanQRCode\",\n    value: function scanQRCode() {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        var completeScan = function completeScan(result) {\n          _this3.setState({\n            completeScan: null\n          });\n\n          if (result) {\n            resolve(result);\n          } else {\n            reject(new Error('User canceled'));\n          }\n        };\n\n        _this3.setState({\n          completeScan: completeScan\n        });\n      });\n    }\n  }, {\n    key: \"openDefaultQRScanner\",\n    value: function () {\n      var _openDefaultQRScanner = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var actions, result, pk;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                actions = this.actions;\n                _context.prev = 1;\n                _context.next = 4;\n                return this.scanQRCode();\n\n              case 4:\n                result = _context.sent;\n\n                if (!this.props.pluginData.tryHandleQR(result, this.getPluginActionContext())) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 9:\n                if (ADDRESS_REGEX.test(result)) {\n                  actions.navigateTo('/send', {\n                    to: result\n                  });\n                } else if (PK_REGEX.test(result)) {\n                  pk = PK_REGEX.exec(result)[1];\n                  actions.safeSetPK(pk);\n                } else if (result.indexOf(location.origin) === 0) {\n                  actions.navigateTo(result.substr(location.origin.length));\n                } else {\n                  console.log(\"Unhandled QR code \\\"\".concat(result, \"\\\"\"));\n                }\n\n              case 10:\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](1);\n\n                if (_context.t0.message !== 'User canceled') {\n                  console.error(_context.t0);\n                }\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 12]]);\n      }));\n\n      function openDefaultQRScanner() {\n        return _openDefaultQRScanner.apply(this, arguments);\n      }\n\n      return openDefaultQRScanner;\n    }()\n  }, {\n    key: \"send\",\n    value: function send(_ref) {\n      var asset = _ref.asset,\n          ether = _ref.ether,\n          value = _ref.value,\n          to = _ref.to,\n          from = _ref.from,\n          message = _ref.message,\n          id = _ref.id;\n\n      var _from = from || this.state.accounts[0];\n\n      var _ether = ether && ether.length > 0 || value ? ether : '0';\n\n      this.props.history.push('/confirm', {\n        asset: asset,\n        ether: _ether,\n        value: value,\n        to: to,\n        from: _from,\n        message: message,\n        id: id\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          core = _this$props.core,\n          pluginData = _this$props.pluginData,\n          children = _this$props.children,\n          burnerComponents = _this$props.burnerComponents,\n          t = _this$props.t;\n      var _this$state = this.state,\n          accounts = _this$state.accounts,\n          completeScan = _this$state.completeScan,\n          loading = _this$state.loading;\n      return React.createElement(Provider, {\n        value: {\n          actions: this.actions,\n          accounts: accounts,\n          assets: core.getAssets(),\n          burnerComponents: burnerComponents,\n          BurnerComponents: burnerComponents,\n          completeScan: completeScan,\n          defaultAccount: accounts.length > 0 ? accounts[0] : ZERO_ADDR,\n          pluginData: pluginData,\n          loading: loading,\n          t: t\n        }\n      }, accounts.length > 0 && children);\n    }\n  }]);\n\n  return BurnerProvider;\n}(Component);\n\nexport default withTranslation()(withRouter(BurnerProvider));\nexport function withBurner(WrappedComponent) {\n  return function BurnerHLC(props) {\n    return React.createElement(Consumer, null, function (burnerContext) {\n      return React.createElement(WrappedComponent, Object.assign({}, burnerContext, props));\n    });\n  };\n}\nexport function useBurner() {\n  return useContext(context);\n}\nexport var SubProvider = function SubProvider(_ref2) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  var value = _objectSpread({}, useBurner(), {}, props);\n\n  return React.createElement(Provider, {\n    value: value\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}