{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar ethUtils = require('ethereumjs-util');\n\nvar EthCrypto = require('eth-crypto');\n\nvar web3Utils = require('web3-utils');\n\nvar relay_prefix = \"rlx:\";\n\nfunction toUint256_noPrefix(int) {\n  return removeHexPrefix(ethUtils.bufferToHex(ethUtils.setLengthLeft(int, 32)));\n}\n\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/, '');\n}\n\nvar zeroPad = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\nfunction padTo64(hex) {\n  if (hex.length < 64) {\n    hex = (zeroPad + hex).slice(-64);\n  }\n\n  return hex;\n}\n\nfunction bytesToHex_noPrefix(bytes) {\n  var hex = removeHexPrefix(web3Utils.toHex(bytes));\n\n  if (hex.length % 2 != 0) {\n    hex = \"0\" + hex;\n  }\n\n  return hex;\n}\n\nmodule.exports = {\n  register_new_relay: function () {\n    var _register_new_relay = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(relayHub, stake, delay, txFee, url, account) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return relayHub.stake(account, delay, {\n                from: account,\n                value: stake\n              });\n\n            case 2:\n              _context.next = 4;\n              return relayHub.registerRelay(txFee, url, {\n                from: account\n              });\n\n            case 4:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function register_new_relay(_x, _x2, _x3, _x4, _x5, _x6) {\n      return _register_new_relay.apply(this, arguments);\n    }\n\n    return register_new_relay;\n  }(),\n  getTransactionHash: function getTransactionHash(from, to, tx, txfee, gas_price, gas_limit, nonce, relay_hub_address, relay_address) {\n    var txhstr = bytesToHex_noPrefix(tx);\n    var dataToHash = Buffer.from(relay_prefix).toString(\"hex\") + removeHexPrefix(from) + removeHexPrefix(to) + txhstr + toUint256_noPrefix(parseInt(txfee)) + toUint256_noPrefix(parseInt(gas_price)) + toUint256_noPrefix(parseInt(gas_limit)) + toUint256_noPrefix(parseInt(nonce)) + removeHexPrefix(relay_hub_address) + removeHexPrefix(relay_address);\n    return web3Utils.sha3('0x' + dataToHash);\n  },\n  getTransactionSignature: function () {\n    var _getTransactionSignature = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(web3, account, hash) {\n      var sig_, signature, sig;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return new Promise(function (resolve, reject) {\n                try {\n                  web3.eth.personal.sign(hash, account, function (err, res) {\n                    if (err) reject(err);else resolve(res);\n                  });\n                } catch (e) {\n                  reject(e);\n                }\n              });\n\n            case 3:\n              sig_ = _context2.sent;\n              _context2.next = 11;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              _context2.next = 10;\n              return new Promise(function (resolve, reject) {\n                web3.eth.sign(hash, account, function (err, res) {\n                  if (err) reject(err);else resolve(res);\n                });\n              });\n\n            case 10:\n              sig_ = _context2.sent;\n\n            case 11:\n              signature = ethUtils.fromRpcSig(sig_);\n              sig = web3Utils.bytesToHex(signature.r) + removeHexPrefix(web3Utils.bytesToHex(signature.s)) + removeHexPrefix(web3Utils.toHex(signature.v));\n              return _context2.abrupt(\"return\", sig);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 6]]);\n    }));\n\n    function getTransactionSignature(_x7, _x8, _x9) {\n      return _getTransactionSignature.apply(this, arguments);\n    }\n\n    return getTransactionSignature;\n  }(),\n  getTransactionSignatureWithKey: function getTransactionSignatureWithKey(privKey, hash) {\n    var withPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var signed;\n\n    if (withPrefix) {\n      var msg = Buffer.concat([Buffer.from(\"\\x19Ethereum Signed Message:\\n32\"), Buffer.from(removeHexPrefix(hash), \"hex\")]);\n      signed = web3Utils.sha3(\"0x\" + msg.toString('hex'));\n    } else signed = hash;\n\n    var keyHex = \"0x\" + Buffer.from(privKey).toString('hex');\n    var sig_ = EthCrypto.sign(keyHex, signed);\n    var signature = ethUtils.fromRpcSig(sig_);\n    var sig = web3Utils.bytesToHex(signature.r) + removeHexPrefix(web3Utils.bytesToHex(signature.s)) + removeHexPrefix(web3Utils.toHex(signature.v));\n    return sig;\n  },\n  getEcRecoverMeta: function getEcRecoverMeta(message, signature) {\n    if (typeof signature === 'string') {\n      var r = this.parseHexString(signature.substr(2, 65));\n      var s = this.parseHexString(signature.substr(66, 65));\n      var v = this.parseHexString(signature.substr(130, 2));\n      signature = {\n        v: v,\n        r: r,\n        s: s\n      };\n    }\n\n    var msg = Buffer.concat([Buffer.from(\"\\x19Ethereum Signed Message:\\n32\"), Buffer.from(removeHexPrefix(message), \"hex\")]);\n    var signed = web3Utils.sha3(\"0x\" + msg.toString('hex'));\n    var buf_signed = Buffer.from(removeHexPrefix(signed), \"hex\");\n    var signer = ethUtils.bufferToHex(ethUtils.pubToAddress(ethUtils.ecrecover(buf_signed, signature.v, signature.r, signature.s)));\n    return signer;\n  },\n  parseHexString: function parseHexString(str) {\n    var result = [];\n\n    while (str.length >= 2) {\n      result.push(parseInt(str.substring(0, 2), 16));\n      str = str.substring(2, str.length);\n    }\n\n    return result;\n  },\n  removeHexPrefix: removeHexPrefix,\n  padTo64: padTo64\n};","map":null,"metadata":{},"sourceType":"script"}