{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ProviderEngine = require(\"web3-provider-engine\");\n\nvar FiltersSubprovider = require(\"web3-provider-engine/subproviders/filters.js\");\n\nvar NonceSubProvider = require(\"web3-provider-engine/subproviders/nonce-tracker.js\");\n\nvar HookedSubprovider = require(\"web3-provider-engine/subproviders/hooked-wallet.js\");\n\nvar ProviderSubprovider = require(\"web3-provider-engine/subproviders/provider.js\");\n\nvar ProxyProvider =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function ProxyProvider(network, core) {\n    _classCallCheck(this, ProxyProvider);\n\n    this.network = network;\n    this.core = core;\n    this.engine = new ProviderEngine();\n    this.engine.addProvider({\n      handleRequest: function () {\n        var _handleRequest = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(payload, next, end) {\n          var result;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n\n                  if (!(payload.method === 'eth_sendTransaction' && core.shouldSkipSigning(network, payload.params[0]))) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 4;\n                  return core.handleRequest(network, payload);\n\n                case 4:\n                  result = _context.sent;\n                  end(null, result);\n                  _context.next = 9;\n                  break;\n\n                case 8:\n                  next();\n\n                case 9:\n                  _context.next = 14;\n                  break;\n\n                case 11:\n                  _context.prev = 11;\n                  _context.t0 = _context[\"catch\"](0);\n                  end(_context.t0);\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 11]]);\n        }));\n\n        function handleRequest(_x, _x2, _x3) {\n          return _handleRequest.apply(this, arguments);\n        }\n\n        return handleRequest;\n      }(),\n      setEngine: function setEngine() {}\n    });\n    this.engine.addProvider(new HookedSubprovider({\n      getAccounts: function () {\n        var _getAccounts = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(cb) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.t0 = cb;\n                  _context2.next = 4;\n                  return core.getAccounts();\n\n                case 4:\n                  _context2.t1 = _context2.sent;\n                  (0, _context2.t0)(null, _context2.t1);\n                  _context2.next = 11;\n                  break;\n\n                case 8:\n                  _context2.prev = 8;\n                  _context2.t2 = _context2[\"catch\"](0);\n                  cb(_context2.t2);\n\n                case 11:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 8]]);\n        }));\n\n        function getAccounts(_x4) {\n          return _getAccounts.apply(this, arguments);\n        }\n\n        return getAccounts;\n      }(),\n      signTransaction: function signTransaction(txParams, cb) {\n        txParams.chainId = +network;\n        core.signTx(txParams).then(function (signedTx) {\n          return cb(null, signedTx);\n        }).catch(function (err) {\n          return cb(err);\n        });\n      },\n      signMessage: function signMessage(_ref, cb) {\n        var data = _ref.data,\n            from = _ref.from;\n        core.signMsg(data, from).then(function (signature) {\n          return cb(null, signature);\n        }).catch(function (err) {\n          return cb(err);\n        });\n      },\n      signPersonalMessage: function signPersonalMessage(_ref2, cb) {\n        var data = _ref2.data,\n            from = _ref2.from;\n        core.signMsg(data, from).then(function (signature) {\n          return cb(null, signature);\n        }).catch(function (err) {\n          return cb(err);\n        });\n      }\n    })); //this.engine.addProvider(new GaspriceProvider());\n\n    this.engine.addProvider(new NonceSubProvider());\n    this.engine.addProvider(new FiltersSubprovider());\n    this.engine.addProvider({\n      handleRequest: function handleRequest(payload, next, end) {\n        // Workaround for https://github.com/MetaMask/eth-block-tracker/pull/42\n        var fakeId = false;\n\n        if (payload.id === 1) {\n          payload.id = Math.floor(Math.random() * 10000000000);\n          fakeId = 1;\n        }\n\n        core.handleRequest(network, payload).then(function (result) {\n          try {\n            if (payload.method === 'eth_sendRawTransaction' && payload.params[0].signedTransaction) {\n              payload.params = [payload.params[0].signedTransaction];\n            }\n\n            end(null, result);\n          } catch (err) {\n            if (err.message !== 'Could not find block') {\n              throw err;\n            }\n          }\n        }).catch(function (err) {\n          return end(err);\n        });\n      },\n      setEngine: function setEngine() {}\n    });\n    this.engine.start();\n  }\n\n  _createClass(ProxyProvider, [{\n    key: \"stop\",\n    value: function stop() {\n      this.engine.stop();\n    }\n  }, {\n    key: \"sendAsync\",\n    value: function sendAsync() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this.engine.sendAsync.apply(this.engine, args);\n    }\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this.engine.send.apply(this.engine, args);\n    }\n  }]);\n\n  return ProxyProvider;\n}();\n\nmodule.exports = ProxyProvider;","map":null,"metadata":{},"sourceType":"script"}