{"ast":null,"code":"import _slicedToArray from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { withBurner } from '@burner-wallet/ui-core';\nimport Page from '../../components/Page';\nimport { pkToAddress, pkRegex, isAllZero } from '../../lib';\nimport MoveBalance from './MoveBalance';\nexport var getAllBalances = function getAllBalances(assets, account) {\n  return Promise.all(assets.map(function (asset) {\n    return asset.getBalance(account);\n  }));\n};\n\nvar moveAll =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(assets, sender, recipient) {\n    var _assets, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, asset, balance;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _assets = Array.from(assets).sort(function (asset) {\n              return asset.type === 'native' ? 1 : -1;\n            });\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context.prev = 4;\n            _iterator = _assets[Symbol.iterator]();\n\n          case 6:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context.next = 17;\n              break;\n            }\n\n            asset = _step.value;\n            _context.next = 10;\n            return asset.getMaximumSendableBalance(sender, recipient);\n\n          case 10:\n            balance = _context.sent;\n\n            if (!(balance !== '0')) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 14;\n            return asset.send({\n              to: recipient,\n              from: sender,\n              value: balance\n            });\n\n          case 14:\n            _iteratorNormalCompletion = true;\n            _context.next = 6;\n            break;\n\n          case 17:\n            _context.next = 23;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 23:\n            _context.prev = 23;\n            _context.prev = 24;\n\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n\n          case 26:\n            _context.prev = 26;\n\n            if (!_didIteratorError) {\n              _context.next = 29;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 29:\n            return _context.finish(26);\n\n          case 30:\n            return _context.finish(23);\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 19, 23, 31], [24,, 26, 30]]);\n  }));\n\n  return function moveAll(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar PKPage = function PKPage(_ref2) {\n  var history = _ref2.history,\n      assets = _ref2.assets,\n      actions = _ref2.actions,\n      defaultAccount = _ref2.defaultAccount;\n\n  var getPK = function getPK() {\n    if (window.location.hash.length > 1) {\n      var hash = window.location.hash.substr(1);\n\n      if (pkRegex.test(hash)) {\n        return hash;\n      }\n    }\n\n    if (history.location.state.newPK) {\n      return history.location.state.newPK;\n    }\n\n    return null;\n  };\n\n  var _useState = useState('loading'),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  var pk = getPK();\n\n  var setPK =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(pk) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return actions.callSigner('writeKey', defaultAccount, pk);\n\n            case 2:\n              history.push('/');\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function setPK(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var tryToSetKey =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var canSetPK, newAddress, currentBalances, newBalances;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!pk) {\n                setStatus('invalid');\n              }\n\n              canSetPK = actions.canCallSigner('writeKey', defaultAccount, pk);\n\n              if (!canSetPK) {\n                setStatus('unavailable');\n              }\n\n              newAddress = actions.canCallSigner('keyToAddress', defaultAccount) ? actions.callSigner('keyToAddress', defaultAccount, pk) : pkToAddress(pk);\n\n              if (!(newAddress.toLowerCase() === defaultAccount.toLowerCase())) {\n                _context3.next = 7;\n                break;\n              }\n\n              history.push('/');\n              return _context3.abrupt(\"return\");\n\n            case 7:\n              _context3.next = 9;\n              return getAllBalances(assets, defaultAccount);\n\n            case 9:\n              currentBalances = _context3.sent;\n\n              if (!isAllZero(currentBalances)) {\n                _context3.next = 13;\n                break;\n              }\n\n              setPK(pk);\n              return _context3.abrupt(\"return\");\n\n            case 13:\n              _context3.next = 15;\n              return getAllBalances(assets, newAddress);\n\n            case 15:\n              newBalances = _context3.sent;\n              setState({\n                newAddress: newAddress,\n                currentBalances: currentBalances,\n                newBalances: newBalances\n              });\n              setStatus('balance');\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function tryToSetKey() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    tryToSetKey();\n  }, [pk]);\n  var content;\n\n  switch (status) {\n    case 'invalid':\n      content = 'Invalid private key';\n      break;\n\n    case 'unavailable':\n      content = 'Unable to change private key';\n      break;\n\n    case 'balance':\n      var _state = state;\n      console.log(_state);\n      content = React.createElement(MoveBalance, {\n        assets: assets,\n        currentAddress: defaultAccount,\n        newAddress: _state.newAddress,\n        currentBalances: _state.currentBalances,\n        newBalances: _state.newBalances,\n        onMoveToCurrent: function () {\n          var _onMoveToCurrent = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee4() {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.prev = 0;\n                    _context4.next = 3;\n                    return actions.callSigner('enable', 'temp', pk);\n\n                  case 3:\n                    _context4.next = 5;\n                    return moveAll(assets, _state.newAddress, defaultAccount);\n\n                  case 5:\n                    _context4.next = 7;\n                    return actions.callSigner('disable', 'temp');\n\n                  case 7:\n                    setStatus('complete');\n                    _context4.next = 13;\n                    break;\n\n                  case 10:\n                    _context4.prev = 10;\n                    _context4.t0 = _context4[\"catch\"](0);\n                    console.error(_context4.t0);\n\n                  case 13:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4, null, [[0, 10]]);\n          }));\n\n          function onMoveToCurrent() {\n            return _onMoveToCurrent.apply(this, arguments);\n          }\n\n          return onMoveToCurrent;\n        }(),\n        onMoveToNew: function () {\n          var _onMoveToNew = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee5() {\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return moveAll(assets, defaultAccount, _state.newAddress);\n\n                  case 2:\n                    setPK(pk);\n                    setStatus('complete');\n\n                  case 4:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n\n          function onMoveToNew() {\n            return _onMoveToNew.apply(this, arguments);\n          }\n\n          return onMoveToNew;\n        }(),\n        discardOld: function discardOld() {\n          return setPK(pk);\n        },\n        cancel: function cancel() {\n          return actions.navigateTo('/');\n        }\n      });\n      break;\n\n    case 'complete':\n      content = 'Key imported';\n      break;\n\n    default:\n      content = null;\n  }\n\n  return React.createElement(Page, {\n    title: \"Change Accounts\"\n  }, content);\n};\n\nexport default withBurner(PKPage);","map":null,"metadata":{},"sourceType":"module"}