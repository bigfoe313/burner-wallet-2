{"ast":null,"code":"import _classCallCheck from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Component } from 'react';\nimport { withBurner } from '../BurnerProvider';\n\nvar AccountKeys =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AccountKeys, _Component);\n\n  function AccountKeys(props) {\n    var _this;\n\n    _classCallCheck(this, AccountKeys);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountKeys).call(this, props));\n    _this.state = {\n      keys: null\n    };\n    return _this;\n  }\n\n  _createClass(AccountKeys, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateKeys();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps) {\n      if (this.props !== oldProps) {\n        this.updateKeys();\n      }\n    }\n  }, {\n    key: \"updateKeys\",\n    value: function updateKeys() {\n      var _this$props = this.props,\n          account = _this$props.account,\n          accounts = _this$props.accounts,\n          actions = _this$props.actions;\n\n      if (accounts.indexOf(account) === -1 || !actions.canCallSigner('readKey', account)) {\n        this.setState({\n          keys: null\n        });\n        return;\n      }\n\n      var keys = {\n        privateKey: actions.callSigner('readKey', account),\n        burnAccount: function burnAccount() {\n          return actions.callSigner('burn', account);\n        }\n      };\n      this.setState({\n        keys: keys\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.render(this.state.keys);\n    }\n  }]);\n\n  return AccountKeys;\n}(Component);\n\nexport default withBurner(AccountKeys);","map":null,"metadata":{},"sourceType":"module"}