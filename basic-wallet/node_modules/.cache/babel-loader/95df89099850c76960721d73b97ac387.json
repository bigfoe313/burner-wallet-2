{"ast":null,"code":"const NativeAsset = require('./NativeAsset');\n\nconst IXDaiBridge = require('./abi/IXDaiBridge.json');\n\nclass XDaiNativeAsset extends NativeAsset {\n  constructor(props) {\n    super(props);\n    this.bridgeAddress = '0x7301cfa0e1756b71869e93d4e4dca5c7d0eb0aa6';\n  }\n\n  async scanBlocks(address, fromBlock, toBlock) {\n    await super.scanBlocks(address, fromBlock, toBlock);\n    const web3 = this.getWeb3();\n    const contract = new web3.eth.Contract(IXDaiBridge, this.bridgeAddress);\n    const events = await contract.getPastEvents('AffirmationCompleted', {\n      fromBlock,\n      toBlock\n    });\n    const filteredEvents = events.filter(event => event.returnValues.recipient.toLowerCase() === address.toLowerCase());\n\n    for (const event of filteredEvents) {\n      this.core.addHistoryEvent({\n        id: \"\".concat(event.transactionHash, \"-\").concat(event.logIndex),\n        asset: this.id,\n        type: 'send',\n        value: event.returnValues.value.toString(),\n        from: this.bridgeAddress,\n        to: event.returnValues.recipient,\n        tx: event.transactionHash,\n        timestamp: await this._getBlockTimestamp(event.blockNumber)\n      });\n    }\n  }\n\n  async getTx(txHash) {\n    const historyEvents = this.core.getHistoryEvents({\n      asset: this.id,\n      account: this.bridgeAddress\n    });\n    const eventMatch = historyEvents.filter(e => e.tx === txHash);\n\n    if (eventMatch.length > 0) {\n      return eventMatch[0];\n    } else {\n      return super.getTx(txHash);\n    }\n  }\n\n}\n\nmodule.exports = new XDaiNativeAsset({\n  id: 'xdai',\n  name: 'xDai',\n  network: '100',\n  usdPrice: 1,\n  icon: 'https://static.burnerfactory.com/icons/xdai.svg'\n});","map":null,"metadata":{},"sourceType":"script"}