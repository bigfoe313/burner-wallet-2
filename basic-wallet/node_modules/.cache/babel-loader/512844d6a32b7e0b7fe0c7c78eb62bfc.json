{"ast":null,"code":"const ethUtils = require('ethereumjs-util');\n\nconst EthCrypto = require('eth-crypto');\n\nconst web3Utils = require('web3-utils');\n\nconst relay_prefix = \"rlx:\";\n\nfunction toUint256_noPrefix(int) {\n  return removeHexPrefix(ethUtils.bufferToHex(ethUtils.setLengthLeft(int, 32)));\n}\n\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/, '');\n}\n\nconst zeroPad = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\nfunction padTo64(hex) {\n  if (hex.length < 64) {\n    hex = (zeroPad + hex).slice(-64);\n  }\n\n  return hex;\n}\n\nfunction bytesToHex_noPrefix(bytes) {\n  let hex = removeHexPrefix(web3Utils.toHex(bytes));\n\n  if (hex.length % 2 != 0) {\n    hex = \"0\" + hex;\n  }\n\n  return hex;\n}\n\nmodule.exports = {\n  register_new_relay: async function (relayHub, stake, delay, txFee, url, account) {\n    await relayHub.stake(account, delay, {\n      from: account,\n      value: stake\n    });\n    return await relayHub.registerRelay(txFee, url, {\n      from: account\n    });\n  },\n  getTransactionHash: function (from, to, tx, txfee, gas_price, gas_limit, nonce, relay_hub_address, relay_address) {\n    let txhstr = bytesToHex_noPrefix(tx);\n    let dataToHash = Buffer.from(relay_prefix).toString(\"hex\") + removeHexPrefix(from) + removeHexPrefix(to) + txhstr + toUint256_noPrefix(parseInt(txfee)) + toUint256_noPrefix(parseInt(gas_price)) + toUint256_noPrefix(parseInt(gas_limit)) + toUint256_noPrefix(parseInt(nonce)) + removeHexPrefix(relay_hub_address) + removeHexPrefix(relay_address);\n    return web3Utils.sha3('0x' + dataToHash);\n  },\n  getTransactionSignature: async function (web3, account, hash) {\n    let sig_;\n\n    try {\n      sig_ = await new Promise((resolve, reject) => {\n        try {\n          web3.eth.personal.sign(hash, account, (err, res) => {\n            if (err) reject(err);else resolve(res);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    } catch (e) {\n      sig_ = await new Promise((resolve, reject) => {\n        web3.eth.sign(hash, account, (err, res) => {\n          if (err) reject(err);else resolve(res);\n        });\n      });\n    }\n\n    let signature = ethUtils.fromRpcSig(sig_);\n    let sig = web3Utils.bytesToHex(signature.r) + removeHexPrefix(web3Utils.bytesToHex(signature.s)) + removeHexPrefix(web3Utils.toHex(signature.v));\n    return sig;\n  },\n  getTransactionSignatureWithKey: function (privKey, hash, withPrefix = true) {\n    let signed;\n\n    if (withPrefix) {\n      let msg = Buffer.concat([Buffer.from(\"\\x19Ethereum Signed Message:\\n32\"), Buffer.from(removeHexPrefix(hash), \"hex\")]);\n      signed = web3Utils.sha3(\"0x\" + msg.toString('hex'));\n    } else signed = hash;\n\n    let keyHex = \"0x\" + Buffer.from(privKey).toString('hex');\n    const sig_ = EthCrypto.sign(keyHex, signed);\n    let signature = ethUtils.fromRpcSig(sig_);\n    let sig = web3Utils.bytesToHex(signature.r) + removeHexPrefix(web3Utils.bytesToHex(signature.s)) + removeHexPrefix(web3Utils.toHex(signature.v));\n    return sig;\n  },\n  getEcRecoverMeta: function (message, signature) {\n    if (typeof signature === 'string') {\n      let r = this.parseHexString(signature.substr(2, 65));\n      let s = this.parseHexString(signature.substr(66, 65));\n      let v = this.parseHexString(signature.substr(130, 2));\n      signature = {\n        v: v,\n        r: r,\n        s: s\n      };\n    }\n\n    let msg = Buffer.concat([Buffer.from(\"\\x19Ethereum Signed Message:\\n32\"), Buffer.from(removeHexPrefix(message), \"hex\")]);\n    let signed = web3Utils.sha3(\"0x\" + msg.toString('hex'));\n    let buf_signed = Buffer.from(removeHexPrefix(signed), \"hex\");\n    let signer = ethUtils.bufferToHex(ethUtils.pubToAddress(ethUtils.ecrecover(buf_signed, signature.v, signature.r, signature.s)));\n    return signer;\n  },\n  parseHexString: function (str) {\n    var result = [];\n\n    while (str.length >= 2) {\n      result.push(parseInt(str.substring(0, 2), 16));\n      str = str.substring(2, str.length);\n    }\n\n    return result;\n  },\n  removeHexPrefix: removeHexPrefix,\n  padTo64: padTo64\n};","map":null,"metadata":{},"sourceType":"script"}