{"ast":null,"code":"import _slicedToArray from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { withBurner } from '@burner-wallet/ui-core';\nimport Page from '../../components/Page';\nimport { pkToAddress, pkRegex, isAllZero } from '../../lib';\nimport MoveBalance from './MoveBalance';\nexport const getAllBalances = (assets, account) => Promise.all(assets.map(asset => asset.getBalance(account)));\n\nconst moveAll = async (assets, sender, recipient) => {\n  const _assets = Array.from(assets).sort(asset => asset.type === 'native' ? 1 : -1);\n\n  for (const asset of _assets) {\n    const balance = await asset.getMaximumSendableBalance(sender, recipient);\n\n    if (balance !== '0') {\n      await asset.send({\n        to: recipient,\n        from: sender,\n        value: balance\n      });\n    }\n  }\n};\n\nconst PKPage = ({\n  history,\n  assets,\n  actions,\n  defaultAccount\n}) => {\n  const getPK = () => {\n    if (window.location.hash.length > 1) {\n      const hash = window.location.hash.substr(1);\n\n      if (pkRegex.test(hash)) {\n        return hash;\n      }\n    }\n\n    if (history.location.state.newPK) {\n      return history.location.state.newPK;\n    }\n\n    return null;\n  };\n\n  const _useState = useState('loading'),\n        _useState2 = _slicedToArray(_useState, 2),\n        status = _useState2[0],\n        setStatus = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        state = _useState4[0],\n        setState = _useState4[1];\n\n  const pk = getPK();\n\n  const setPK = async pk => {\n    await actions.callSigner('writeKey', defaultAccount, pk);\n    history.push('/');\n  };\n\n  const tryToSetKey = async () => {\n    if (!pk) {\n      setStatus('invalid');\n    }\n\n    const canSetPK = actions.canCallSigner('writeKey', defaultAccount, pk);\n\n    if (!canSetPK) {\n      setStatus('unavailable');\n    }\n\n    const newAddress = actions.canCallSigner('keyToAddress', defaultAccount) ? actions.callSigner('keyToAddress', defaultAccount, pk) : pkToAddress(pk);\n\n    if (newAddress.toLowerCase() === defaultAccount.toLowerCase()) {\n      history.push('/');\n      return;\n    }\n\n    const currentBalances = await getAllBalances(assets, defaultAccount);\n\n    if (isAllZero(currentBalances)) {\n      setPK(pk);\n      return;\n    }\n\n    const newBalances = await getAllBalances(assets, newAddress);\n    setState({\n      newAddress,\n      currentBalances,\n      newBalances\n    });\n    setStatus('balance');\n  };\n\n  useEffect(() => {\n    tryToSetKey();\n  }, [pk]);\n  let content;\n\n  switch (status) {\n    case 'invalid':\n      content = 'Invalid private key';\n      break;\n\n    case 'unavailable':\n      content = 'Unable to change private key';\n      break;\n\n    case 'balance':\n      const _state = state;\n      console.log(_state);\n      content = React.createElement(MoveBalance, {\n        assets: assets,\n        currentAddress: defaultAccount,\n        newAddress: _state.newAddress,\n        currentBalances: _state.currentBalances,\n        newBalances: _state.newBalances,\n        onMoveToCurrent: async () => {\n          try {\n            await actions.callSigner('enable', 'temp', pk);\n            await moveAll(assets, _state.newAddress, defaultAccount);\n            await actions.callSigner('disable', 'temp');\n            setStatus('complete');\n          } catch (e) {\n            console.error(e);\n          }\n        },\n        onMoveToNew: async () => {\n          await moveAll(assets, defaultAccount, _state.newAddress);\n          setPK(pk);\n          setStatus('complete');\n        },\n        discardOld: () => setPK(pk),\n        cancel: () => actions.navigateTo('/')\n      });\n      break;\n\n    case 'complete':\n      content = 'Key imported';\n      break;\n\n    default:\n      content = null;\n  }\n\n  return React.createElement(Page, {\n    title: \"Change Accounts\"\n  }, content);\n};\n\nexport default withBurner(PKPage);","map":null,"metadata":{},"sourceType":"module"}