{"ast":null,"code":"const Web3 = require('web3');\n\nconst Signer = require('./Signer');\n\nconst arrayEquals = (a, b) => a.length === b.length && a.every((val, i) => val === b[i]);\n\nclass InjectedSigner extends Signer {\n  constructor({\n    autoEnable = false,\n    provider = null\n  } = {}) {\n    super({\n      id: 'injected'\n    });\n    this.accounts = [];\n    this._provider = provider;\n\n    const _provider = this.provider();\n\n    if (_provider) {\n      this.web3 = new Web3(_provider);\n      this.updateAccounts();\n\n      if (autoEnable && _provider.enable) {\n        this.enable();\n      }\n    }\n  }\n\n  isAvailable() {\n    return !!this.provider() && this.accounts.length > 0;\n  }\n\n  async signTx(tx) {\n    const signedTransaction = await this.web3.eth.signTransaction(tx);\n    return { ...tx,\n      signedTransaction\n    };\n  }\n\n  signMsg(msg, account) {\n    return this.web3.eth.sign(msg, account);\n  }\n\n  shouldSkipSigning(network) {\n    const isMetaMask = !!this.provider().isMetaMask;\n\n    if (isMetaMask && network !== this.provider().networkVersion) {\n      throw new Error('Metamask is connected to the wrong network');\n    }\n\n    return isMetaMask;\n  }\n\n  permissions() {\n    const canEnable = this.accounts.length === 0 && (this.provider() || {}).enable;\n    return canEnable ? ['enable'] : [];\n  }\n\n  invoke(action, account, ...params) {\n    switch (action) {\n      case 'enable':\n        return this.enable();\n\n      default:\n        throw new Error(\"Unknown action \".concat(action));\n    }\n  }\n\n  async enable() {\n    await this.provider().enable();\n    await this.updateAccounts();\n  }\n\n  async updateAccounts() {\n    const accounts = await this.web3.eth.getAccounts();\n\n    if (!arrayEquals(accounts, this.accounts)) {\n      this.accounts = accounts;\n      this.events.emit('accountChange');\n    }\n  }\n\n  provider() {\n    return this._provider || window.ethereum || window.web3 && window.web3.currentProvider;\n  }\n\n}\n\nmodule.exports = InjectedSigner;","map":null,"metadata":{},"sourceType":"script"}