{"ast":null,"code":"import namehash from 'eth-ens-namehash';\nimport { registryInterface, resolverInterface } from './abi';\nconst ZERO = '0x0000000000000000000000000000000000000000';\nconst registrarAddress = {\n  '1': '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  '3': '0x112234455c3a32fd11230c42e7bccd4a84e02010',\n  '4': '0xe7410170f87102df0055eb195163a03b7f2bff4a',\n  '5': '0x112234455c3a32fd11230c42e7bccd4a84e02010'\n};\nexport default class ENS {\n  constructor(web3, network = '1') {\n    this.web3 = web3;\n    this.network = network;\n  }\n\n  getRegistry() {\n    if (!registrarAddress[this.network]) {\n      throw new Error(\"ENS not supported on network \".concat(this.network));\n    }\n\n    return new this.web3.eth.Contract(registryInterface, registrarAddress[this.network]);\n  }\n\n  getResolver(address) {\n    return new this.web3.eth.Contract(resolverInterface, address);\n  }\n\n  async getAddress(ensName) {\n    const hashed = namehash.hash(ensName);\n    const resolverAddr = await this.getRegistry().methods.resolver(hashed).call();\n\n    if (resolverAddr === ZERO) {\n      return null;\n    }\n\n    const address = await this.getResolver(resolverAddr).methods.addr(hashed).call();\n    return address === ZERO ? null : address;\n  }\n\n  async reverseLookup(address) {\n    const _address = (address.indexOf('0x') === 0 ? address.substr(2) : address).toLowerCase();\n\n    const hashed = namehash.hash(\"\".concat(_address, \".addr.reverse\"));\n    const resolverAddr = await this.getRegistry().methods.resolver(hashed).call();\n\n    if (resolverAddr === ZERO) {\n      return null;\n    }\n\n    const name = await this.getResolver(resolverAddr).methods.name(hashed).call();\n    return name;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}