{"ast":null,"code":"var _slicedToArray = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst Asset = require('./Asset');\n\nconst IERC20abi = require('./abi/IERC20.json');\n\nconst BLOCK_LOOKBACK = 250;\nconst POLL_INTERVAL = 2500;\n\nclass ERC20Asset extends Asset {\n  constructor({\n    address,\n    abi = IERC20abi,\n    pollInterval = POLL_INTERVAL,\n    type = 'erc20',\n    ...params\n  }) {\n    super({ ...params,\n      type\n    });\n    this.address = address;\n    this.abi = abi;\n    this._pollInterval = pollInterval;\n    this._contract = null;\n  }\n\n  async getBalance(account) {\n    const balance = await this.getContract().methods.balanceOf(account).call();\n    return balance.toString();\n  }\n\n  getContract() {\n    if (!this._contract) {\n      const Contract = this.getWeb3().eth.Contract;\n      this._contract = new Contract(this.abi, this.address);\n    }\n\n    return this._contract;\n  }\n\n  allowance(from, to) {\n    return this.getContract().methods.allowance(from, to).call();\n  }\n\n  approve(from, to, value) {\n    return this.getContract().methods.approve(to, value).send({\n      from\n    });\n  }\n\n  async getTx(txHash) {\n    const events = await this._getEventsFromTx(txHash);\n\n    const _events$filter = events.filter(event => event.event === 'Transfer'),\n          _events$filter2 = _slicedToArray(_events$filter, 1),\n          transferEvent = _events$filter2[0];\n\n    if (!transferEvent) {\n      return null;\n    }\n\n    return {\n      asset: this.id,\n      assetName: this.name,\n      from: transferEvent.returnValues.from,\n      to: transferEvent.returnValues.to,\n      value: transferEvent.returnValues.value.toString(),\n      displayValue: this.getDisplayValue(transferEvent.returnValues.value.toString()),\n      message: null,\n      timestamp: await this._getBlockTimestamp(transferEvent.blockNumber)\n    };\n  }\n\n  startWatchingAddress(address) {\n    let block = 0;\n    return this.poll(async () => {\n      const currentBlock = await this.getWeb3().eth.getBlockNumber();\n\n      if (block === 0) {\n        block = Math.max(currentBlock - BLOCK_LOOKBACK, 0);\n      }\n\n      const events = await this.getContract().getPastEvents('Transfer', {\n        filter: {\n          to: address\n        },\n        fromBlock: block,\n        toBlock: currentBlock\n      });\n      await events.map(async event => this.core.addHistoryEvent({\n        id: \"\".concat(event.transactionHash, \"-\").concat(event.logIndex),\n        asset: this.id,\n        type: 'send',\n        value: event.returnValues.value.toString(),\n        from: event.returnValues.from,\n        to: event.returnValues.to,\n        tx: event.transactionHash,\n        timestamp: await this._getBlockTimestamp(event.blockNumber)\n      }));\n      block = currentBlock;\n    }, this._pollInterval);\n  }\n\n  async _getEventsFromTx(txHash) {\n    const web3 = this.getWeb3();\n    const receipt = await web3.eth.getTransactionReceipt(txHash);\n\n    if (!receipt) {\n      return [];\n    }\n\n    const events = await this.getContract().getPastEvents('allEvents', {\n      fromBlock: receipt.blockNumber,\n      toBlock: receipt.blockNumber\n    });\n    return events.filter(event => event.transactionHash === txHash);\n  }\n\n  async _send({\n    from,\n    to,\n    value\n  }) {\n    const receipt = await this.getContract().methods.transfer(to, value).send({\n      from\n    });\n    return { ...receipt,\n      txHash: receipt.transactionHash,\n      id: \"\".concat(receipt.transactionHash, \"-\").concat(receipt.events.Transfer.logIndex)\n    };\n  }\n\n}\n\nmodule.exports = ERC20Asset;","map":null,"metadata":{},"sourceType":"script"}