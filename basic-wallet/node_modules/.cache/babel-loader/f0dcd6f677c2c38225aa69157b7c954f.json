{"ast":null,"code":"const Web3 = require('web3');\n\nconst RelayClient = require('./RelayClient');\n\nclass RelayProvider {\n  /**\n   * create a proxy provider, to relay transaction\n   * @param origProvider - the underlying web3 provider\n   * @param relayOptions:\n   *      disableRelay - true to bypass the relay, and call directly the origProvider.\n   *      skipSenders - hash of \"from\" addresses that should bypass the relay ( e.g. skipSenders={myDirectAddress:true} )\n   *      other options of RelayClient..\n   */\n  constructor(origProvider, relayOptions) {\n    relayOptions = relayOptions || {};\n    relayOptions.isRelayEnabled = true;\n    this.relayOptions = relayOptions;\n\n    if (origProvider.origProvider) {\n      //we're 2nd-level wrapper.. disable previous one.\n      console.log(\"wrapping RelayProvider with another.. skipping previous one.\");\n      origProvider = origProvider.origProvider;\n    }\n\n    this.origProvider = origProvider;\n    this.origProviderSend = (this.origProvider['sendAsync'] || this.origProvider['send']).bind(this.origProvider);\n    this.relayClient = new RelayClient(new Web3(origProvider), relayOptions);\n  }\n\n  enable(isRelayEnabled) {\n    this.relayOptions.isRelayEnabled = isRelayEnabled;\n  }\n\n  send(payload, callback) {\n    if (!this.skipRelay(payload)) {\n      if (payload.method == 'eth_sendTransaction') {\n        if (this.relayOptions.verbose) console.log(\"calling sendAsync\" + JSON.stringify(payload));\n        this.relayClient.runRelay(payload, callback);\n        return;\n      } else if (payload.method == 'eth_getTransactionReceipt') {\n        if (this.relayOptions.verbose) console.log(\"calling sendAsync\" + JSON.stringify(payload));\n        this.origProviderSend(payload, (e, r) => {\n          if (e) callback(e);else {\n            this.relayClient.fixTransactionReceiptResp(r.result);\n            callback(null, r);\n          }\n        });\n        return;\n      }\n    }\n\n    this.origProviderSend(payload, function (error, result) {\n      callback(error, result);\n    });\n  }\n\n  sendAsync(payload, callback) {\n    return this.send(payload, callback);\n  } //hook method: skip relay if the \"from\" address appears in optins.skipSenders\n\n\n  skipRelay(payload) {\n    return !this.relayOptions.isRelayEnabled || this.relayOptions.skipSenders && this.relayOptions.skipSenders[payload.params.from];\n  }\n\n}\n\nmodule.exports = RelayProvider;","map":null,"metadata":{},"sourceType":"script"}