{"ast":null,"code":"var _classCallCheck = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Web3 = require('web3');\n\nvar RelayClient = require('./RelayClient');\n\nvar RelayProvider =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  /**\n   * create a proxy provider, to relay transaction\n   * @param origProvider - the underlying web3 provider\n   * @param relayOptions:\n   *      disableRelay - true to bypass the relay, and call directly the origProvider.\n   *      skipSenders - hash of \"from\" addresses that should bypass the relay ( e.g. skipSenders={myDirectAddress:true} )\n   *      other options of RelayClient..\n   */\n  function RelayProvider(origProvider, relayOptions) {\n    _classCallCheck(this, RelayProvider);\n\n    relayOptions = relayOptions || {};\n    relayOptions.isRelayEnabled = true;\n    this.relayOptions = relayOptions;\n\n    if (origProvider.origProvider) {\n      //we're 2nd-level wrapper.. disable previous one.\n      console.log(\"wrapping RelayProvider with another.. skipping previous one.\");\n      origProvider = origProvider.origProvider;\n    }\n\n    this.origProvider = origProvider;\n    this.origProviderSend = (this.origProvider['sendAsync'] || this.origProvider['send']).bind(this.origProvider);\n    this.relayClient = new RelayClient(new Web3(origProvider), relayOptions);\n  }\n\n  _createClass(RelayProvider, [{\n    key: \"enable\",\n    value: function enable(isRelayEnabled) {\n      this.relayOptions.isRelayEnabled = isRelayEnabled;\n    }\n  }, {\n    key: \"send\",\n    value: function send(payload, callback) {\n      var _this = this;\n\n      if (!this.skipRelay(payload)) {\n        if (payload.method == 'eth_sendTransaction') {\n          if (this.relayOptions.verbose) console.log(\"calling sendAsync\" + JSON.stringify(payload));\n          this.relayClient.runRelay(payload, callback);\n          return;\n        } else if (payload.method == 'eth_getTransactionReceipt') {\n          if (this.relayOptions.verbose) console.log(\"calling sendAsync\" + JSON.stringify(payload));\n          this.origProviderSend(payload, function (e, r) {\n            if (e) callback(e);else {\n              _this.relayClient.fixTransactionReceiptResp(r.result);\n\n              callback(null, r);\n            }\n          });\n          return;\n        }\n      }\n\n      this.origProviderSend(payload, function (error, result) {\n        callback(error, result);\n      });\n    }\n  }, {\n    key: \"sendAsync\",\n    value: function sendAsync(payload, callback) {\n      return this.send(payload, callback);\n    } //hook method: skip relay if the \"from\" address appears in optins.skipSenders\n\n  }, {\n    key: \"skipRelay\",\n    value: function skipRelay(payload) {\n      return !this.relayOptions.isRelayEnabled || this.relayOptions.skipSenders && this.relayOptions.skipSenders[payload.params.from];\n    }\n  }]);\n\n  return RelayProvider;\n}();\n\nmodule.exports = RelayProvider;","map":null,"metadata":{},"sourceType":"script"}