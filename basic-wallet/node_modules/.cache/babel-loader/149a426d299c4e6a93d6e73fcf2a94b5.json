{"ast":null,"code":"const Gateway = require('./Gateway');\n\nconst Web3 = require('web3');\n\nclass RivetGateway extends Gateway {\n  constructor(key) {\n    super();\n    this.available = !!key;\n\n    if (!key) {\n      console.warn('Warning: RivetGateway created without API Key. Rivet will be unavailable.');\n    }\n\n    this.providerStrings = {\n      '1': \"https://eth.rpc.rivet.cloud/\".concat(key),\n      '3': \"https://ropsten.rpc.rivet.cloud/\".concat(key),\n      '4': \"https://rinkeby.rpc.rivet.cloud/\".concat(key),\n      '5': \"https://goerli.rpc.rivet.cloud/\".concat(key)\n    };\n    this.providers = {};\n  }\n\n  isAvailable() {\n    return this.available;\n  }\n\n  getNetworks() {\n    return ['1', '3', '4', '5'];\n  }\n\n  _provider(network) {\n    if (!this.providers[network]) {\n      if (!this.providerStrings[network]) {\n        throw new Error(\"Network \".concat(network, \" not supported by RivetGateway\"));\n      }\n\n      this.providers[network] = new Web3.providers.HttpProvider(this.providerStrings[network]);\n    }\n\n    return this.providers[network];\n  }\n\n  send(network, payload) {\n    return new Promise((resolve, reject) => {\n      if (this.getNetworks().indexOf(network) === -1) {\n        return reject(new Error(\"Rivet Gateway does not support this network \\\"\".concat(network, \"\\\"\")));\n      }\n\n      this._provider(network).send(payload, (err, response) => {\n        if (err) {\n          return reject(err);\n        }\n\n        return resolve(response.result);\n      });\n    });\n  }\n\n}\n\nmodule.exports = RivetGateway;","map":null,"metadata":{},"sourceType":"script"}