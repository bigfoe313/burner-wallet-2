{"ast":null,"code":"const ProviderEngine = require(\"web3-provider-engine\");\n\nconst FiltersSubprovider = require(\"web3-provider-engine/subproviders/filters.js\");\n\nconst NonceSubProvider = require(\"web3-provider-engine/subproviders/nonce-tracker.js\");\n\nconst HookedSubprovider = require(\"web3-provider-engine/subproviders/hooked-wallet.js\");\n\nconst ProviderSubprovider = require(\"web3-provider-engine/subproviders/provider.js\");\n\nclass ProxyProvider {\n  constructor(network, core) {\n    this.network = network;\n    this.core = core;\n    this.engine = new ProviderEngine();\n    this.engine.addProvider({\n      async handleRequest(payload, next, end) {\n        try {\n          if (payload.method === 'eth_sendTransaction' && core.shouldSkipSigning(network, payload.params[0])) {\n            const result = await core.handleRequest(network, payload);\n            end(null, result);\n          } else {\n            next();\n          }\n        } catch (err) {\n          end(err);\n        }\n      },\n\n      setEngine() {}\n\n    });\n    this.engine.addProvider(new HookedSubprovider({\n      async getAccounts(cb) {\n        try {\n          cb(null, (await core.getAccounts()));\n        } catch (err) {\n          cb(err);\n        }\n      },\n\n      signTransaction(txParams, cb) {\n        txParams.chainId = +network;\n        core.signTx(txParams).then(signedTx => cb(null, signedTx)).catch(err => cb(err));\n      },\n\n      signMessage({\n        data,\n        from\n      }, cb) {\n        core.signMsg(data, from).then(signature => cb(null, signature)).catch(err => cb(err));\n      },\n\n      signPersonalMessage({\n        data,\n        from\n      }, cb) {\n        core.signMsg(data, from).then(signature => cb(null, signature)).catch(err => cb(err));\n      }\n\n    })); //this.engine.addProvider(new GaspriceProvider());\n\n    this.engine.addProvider(new NonceSubProvider());\n    this.engine.addProvider(new FiltersSubprovider());\n    this.engine.addProvider({\n      handleRequest(payload, next, end) {\n        // Workaround for https://github.com/MetaMask/eth-block-tracker/pull/42\n        let fakeId = false;\n\n        if (payload.id === 1) {\n          payload.id = Math.floor(Math.random() * 10000000000);\n          fakeId = 1;\n        }\n\n        core.handleRequest(network, payload).then(result => {\n          try {\n            if (payload.method === 'eth_sendRawTransaction' && payload.params[0].signedTransaction) {\n              payload.params = [payload.params[0].signedTransaction];\n            }\n\n            end(null, result);\n          } catch (err) {\n            if (err.message !== 'Could not find block') {\n              throw err;\n            }\n          }\n        }).catch(err => end(err));\n      },\n\n      setEngine() {}\n\n    });\n    this.engine.start();\n  }\n\n  stop() {\n    this.engine.stop();\n  }\n\n  sendAsync(...args) {\n    this.engine.sendAsync.apply(this.engine, args);\n  }\n\n  send(...args) {\n    return this.engine.send.apply(this.engine, args);\n  }\n\n}\n\nmodule.exports = ProxyProvider;","map":null,"metadata":{},"sourceType":"script"}