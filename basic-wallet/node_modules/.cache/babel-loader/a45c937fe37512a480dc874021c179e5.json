{"ast":null,"code":"import React, { Component, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { withTranslation } from 'react-i18next';\nimport { DEFAULT_PLUGIN_DATA } from './Plugins';\nconst ZERO_ADDR = '0x0000000000000000000000000000000000000000';\n\nconst unavailable = () => {\n  throw new Error('Unavailable');\n};\n\nexport const context = React.createContext({\n  actions: {\n    callSigner: unavailable,\n    canCallSigner: unavailable,\n    navigateTo: unavailable,\n    openDefaultQRScanner: unavailable,\n    scanQRCode: unavailable,\n    safeSetPK: unavailable,\n    send: unavailable,\n    setLoading: unavailable,\n    getHistoryEvents: unavailable,\n    onHistoryEvent: unavailable,\n    removeHistoryEventListener: unavailable\n  },\n  assets: [],\n  accounts: [],\n  defaultAccount: ZERO_ADDR,\n  pluginData: DEFAULT_PLUGIN_DATA,\n  burnerComponents: {},\n  BurnerComponents: {},\n  completeScan: null,\n  loading: null,\n  t: key => key\n});\nconst Provider = context.Provider,\n      Consumer = context.Consumer;\nconst ADDRESS_REGEX = /^(?:0x)?[0-9a-f]{40}$/i;\nconst PK_REGEX = /^(?:https?:\\/\\/[-a-z.]+\\/pk#)?((?:0x)?[0-9a-f]{64})$/i;\n\nclass BurnerProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.actions = {\n      canCallSigner: props.core.canCallSigner.bind(props.core),\n      callSigner: props.core.callSigner.bind(props.core),\n      openDefaultQRScanner: this.openDefaultQRScanner.bind(this),\n      safeSetPK: newPK => props.history.push('/pk', {\n        newPK\n      }),\n      scanQRCode: this.scanQRCode.bind(this),\n      send: this.send.bind(this),\n      navigateTo: (location, state) => Number.isInteger(location) ? props.history.go(location) : props.history.push(location, state),\n      setLoading: status => this.setState({\n        loading: status\n      }),\n      getHistoryEvents: options => props.core.getHistoryEvents(options),\n      onHistoryEvent: cb => props.core.onHistoryEvent(cb),\n      removeHistoryEventListener: cb => props.core.removeHistoryEventListener(cb)\n    };\n    this.state = {\n      accounts: [],\n      completeScan: null,\n      loading: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      accounts: this.props.core.getAccounts()\n    });\n    this.props.core.onAccountChange(accounts => this.setState({\n      accounts\n    }));\n    this.props.pluginData.startup(this.getPluginActionContext());\n  }\n\n  getPluginActionContext() {\n    return {\n      actions: this.actions,\n      location: this.props.location\n    };\n  }\n\n  scanQRCode() {\n    return new Promise((resolve, reject) => {\n      const completeScan = result => {\n        this.setState({\n          completeScan: null\n        });\n\n        if (result) {\n          resolve(result);\n        } else {\n          reject(new Error('User canceled'));\n        }\n      };\n\n      this.setState({\n        completeScan\n      });\n    });\n  }\n\n  async openDefaultQRScanner() {\n    const actions = this.actions;\n\n    try {\n      const result = await this.scanQRCode();\n\n      if (this.props.pluginData.tryHandleQR(result, this.getPluginActionContext())) {\n        return;\n      } else if (ADDRESS_REGEX.test(result)) {\n        actions.navigateTo('/send', {\n          to: result\n        });\n      } else if (PK_REGEX.test(result)) {\n        const pk = PK_REGEX.exec(result)[1];\n        actions.safeSetPK(pk);\n      } else if (result.indexOf(location.origin) === 0) {\n        actions.navigateTo(result.substr(location.origin.length));\n      } else {\n        console.log(\"Unhandled QR code \\\"\".concat(result, \"\\\"\"));\n      }\n    } catch (e) {\n      if (e.message !== 'User canceled') {\n        console.error(e);\n      }\n    }\n  }\n\n  send({\n    asset,\n    ether,\n    value,\n    to,\n    from,\n    message,\n    id\n  }) {\n    const _from = from || this.state.accounts[0];\n\n    const _ether = ether && ether.length > 0 || value ? ether : '0';\n\n    this.props.history.push('/confirm', {\n      asset,\n      ether: _ether,\n      value,\n      to,\n      from: _from,\n      message,\n      id\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          core = _this$props.core,\n          pluginData = _this$props.pluginData,\n          children = _this$props.children,\n          burnerComponents = _this$props.burnerComponents,\n          t = _this$props.t;\n    const _this$state = this.state,\n          accounts = _this$state.accounts,\n          completeScan = _this$state.completeScan,\n          loading = _this$state.loading;\n    return React.createElement(Provider, {\n      value: {\n        actions: this.actions,\n        accounts,\n        assets: core.getAssets(),\n        burnerComponents,\n        BurnerComponents: burnerComponents,\n        completeScan,\n        defaultAccount: accounts.length > 0 ? accounts[0] : ZERO_ADDR,\n        pluginData,\n        loading,\n        t\n      }\n    }, accounts.length > 0 && children);\n  }\n\n}\n\nexport default withTranslation()(withRouter(BurnerProvider));\nexport function withBurner(WrappedComponent) {\n  return function BurnerHLC(props) {\n    return React.createElement(Consumer, null, burnerContext => React.createElement(WrappedComponent, Object.assign({}, burnerContext, props)));\n  };\n}\nexport function useBurner() {\n  return useContext(context);\n}\nexport const SubProvider = ({\n  children,\n  ...props\n}) => {\n  const value = { ...useBurner(),\n    ...props\n  };\n  return React.createElement(Provider, {\n    value: value\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}