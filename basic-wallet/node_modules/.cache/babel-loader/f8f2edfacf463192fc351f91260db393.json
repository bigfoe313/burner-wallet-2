{"ast":null,"code":"import Bridge from \"./Bridge\";\nconst bridgeAAbi = [{\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": false,\n    \"name\": \"recipient\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"value\",\n    \"type\": \"uint256\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"transactionHash\",\n    \"type\": \"bytes32\"\n  }],\n  \"name\": \"AffirmationCompleted\",\n  \"type\": \"event\"\n}];\nconst bridgeBAbi = [{\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": false,\n    \"name\": \"recipient\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"value\",\n    \"type\": \"uint256\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"transactionHash\",\n    \"type\": \"bytes32\"\n  }],\n  \"name\": \"RelayedMessage\",\n  \"type\": \"event\"\n}];\n\nconst wait = time => new Promise(resolve => setTimeout(resolve, time));\n\nconst TIMEOUT = 180000;\nexport default class XDaiBridge extends Bridge {\n  constructor() {\n    super({\n      assetA: 'xdai',\n      assetABridge: '0x7301cfa0e1756b71869e93d4e4dca5c7d0eb0aa6',\n      assetB: 'dai',\n      assetBBridge: '0x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016'\n    });\n  }\n\n  async detectExchangeBToAFinished(account, value, sendResult) {\n    const asset = this.getExchange().getAsset(this.assetA);\n    const web3 = asset.getWeb3();\n    const contract = new web3.eth.Contract(bridgeAAbi, this.assetABridge);\n    let fromBlock = await web3.eth.getBlockNumber();\n    const stopTime = Date.now() + TIMEOUT;\n\n    while (Date.now() <= stopTime) {\n      const currentBlock = await web3.eth.getBlockNumber();\n      const events = await contract.getPastEvents('AffirmationCompleted', {\n        fromBlock,\n        toBlock: currentBlock\n      });\n      const confirmationEvent = events.filter(event => event.returnValues.transactionHash === sendResult.txHash);\n\n      if (confirmationEvent.length > 0) {\n        return;\n      }\n\n      fromBlock = currentBlock;\n      await wait(5000);\n    }\n  }\n\n  async detectExchangeAToBFinished(account, value, sendResult) {\n    const web3 = this.getExchange().getAsset(this.assetB).getWeb3();\n    const contract = new web3.eth.Contract(bridgeBAbi, this.assetBBridge);\n    let fromBlock = await web3.eth.getBlockNumber();\n    const stopTime = Date.now() + TIMEOUT;\n\n    while (Date.now() <= stopTime) {\n      const currentBlock = await web3.eth.getBlockNumber();\n      const events = await contract.getPastEvents('RelayedMessage', {\n        fromBlock,\n        toBlock: currentBlock\n      });\n      const confirmationEvent = events.filter(event => event.returnValues.transactionHash === sendResult.txHash);\n\n      if (confirmationEvent.length > 0) {\n        return;\n      }\n\n      fromBlock = currentBlock;\n      await wait(10000);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}