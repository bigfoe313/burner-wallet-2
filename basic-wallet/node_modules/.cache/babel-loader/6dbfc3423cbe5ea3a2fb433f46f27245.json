{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _classCallCheck = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _require = require('web3-utils'),\n    toBN = _require.toBN,\n    toChecksumAddress = _require.toChecksumAddress,\n    padLeft = _require.padLeft,\n    hexToNumberString = _require.hexToNumberString;\n\nvar Asset = require('./Asset');\n\nvar POLL_INTERVAL = 2500;\nvar TRANSFER_TOPIC = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef';\n\nvar NativeAsset =\n/*#__PURE__*/\nfunction (_Asset) {\n  \"use strict\";\n\n  _inherits(NativeAsset, _Asset);\n\n  function NativeAsset(_ref) {\n    var _this;\n\n    var _ref$pollInterval = _ref.pollInterval,\n        pollInterval = _ref$pollInterval === void 0 ? POLL_INTERVAL : _ref$pollInterval,\n        props = _objectWithoutProperties(_ref, [\"pollInterval\"]);\n\n    _classCallCheck(this, NativeAsset);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NativeAsset).call(this, _objectSpread({}, props, {\n      type: 'native'\n    })));\n    _this._pollInterval = pollInterval;\n    return _this;\n  }\n\n  _createClass(NativeAsset, [{\n    key: \"getBalance\",\n    value: function getBalance(account) {\n      return this.getWeb3().eth.getBalance(account);\n    }\n  }, {\n    key: \"supportsMessages\",\n    value: function supportsMessages() {\n      return true;\n    }\n  }, {\n    key: \"startWatchingAddress\",\n    value: function startWatchingAddress(address) {\n      var _this2 = this;\n\n      var block = 0;\n      var balance = 0;\n      return this.poll(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var web3, _ref3, _ref4, currentBlock, currentBalance, offsetBalance;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                web3 = _this2.getWeb3();\n                _context.next = 3;\n                return Promise.all([web3.eth.getBlockNumber(), web3.eth.getBalance(address)]);\n\n              case 3:\n                _ref3 = _context.sent;\n                _ref4 = _slicedToArray(_ref3, 2);\n                currentBlock = _ref4[0];\n                currentBalance = _ref4[1];\n\n                if (!(block !== 0 && balance !== currentBalance)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                offsetBalance = web3.utils.toBN(balance).add(web3.utils.toBN(_this2.getBalanceDelta(address, block + 1, currentBlock)));\n\n                if (!(offsetBalance !== currentBalance)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 12;\n                return _this2.scanBlocks(address, block + 1, currentBlock);\n\n              case 12:\n                block = currentBlock;\n                balance = currentBalance;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })), this._pollInterval);\n    }\n  }, {\n    key: \"scanBlocks\",\n    value: function () {\n      var _scanBlocks = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(address, startBlock, toBlock) {\n        var _this3 = this;\n\n        var _address, web3, logs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, log, parsedLog, blockNums, blockNum;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _address = address.toLowerCase();\n                web3 = this.getWeb3();\n                _context4.next = 4;\n                return web3.eth.getPastLogs({\n                  fromBlock: startBlock,\n                  toBlock: toBlock,\n                  address: address,\n                  topics: [TRANSFER_TOPIC]\n                });\n\n              case 4:\n                logs = _context4.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context4.prev = 8;\n                _iterator = logs[Symbol.iterator]();\n\n              case 10:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context4.next = 28;\n                  break;\n                }\n\n                log = _step.value;\n                parsedLog = this.getTransferLog([log]);\n                _context4.t0 = this.core;\n                _context4.t1 = this.id;\n                _context4.t2 = this.name;\n                _context4.t3 = parsedLog.args.from;\n                _context4.t4 = parsedLog.args.to;\n                _context4.t5 = parsedLog.args.value;\n                _context4.t6 = this.getDisplayValue(parsedLog.args.value);\n                _context4.next = 22;\n                return this._getBlockTimestamp(parsedLog.blockNumber);\n\n              case 22:\n                _context4.t7 = _context4.sent;\n                _context4.t8 = {\n                  asset: _context4.t1,\n                  assetName: _context4.t2,\n                  type: 'send',\n                  from: _context4.t3,\n                  to: _context4.t4,\n                  value: _context4.t5,\n                  displayValue: _context4.t6,\n                  message: null,\n                  timestamp: _context4.t7\n                };\n\n                _context4.t0.addHistoryEvent.call(_context4.t0, _context4.t8);\n\n              case 25:\n                _iteratorNormalCompletion = true;\n                _context4.next = 10;\n                break;\n\n              case 28:\n                _context4.next = 34;\n                break;\n\n              case 30:\n                _context4.prev = 30;\n                _context4.t9 = _context4[\"catch\"](8);\n                _didIteratorError = true;\n                _iteratorError = _context4.t9;\n\n              case 34:\n                _context4.prev = 34;\n                _context4.prev = 35;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 37:\n                _context4.prev = 37;\n\n                if (!_didIteratorError) {\n                  _context4.next = 40;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 40:\n                return _context4.finish(37);\n\n              case 41:\n                return _context4.finish(34);\n\n              case 42:\n                blockNums = [];\n\n                for (blockNum = startBlock; blockNum <= toBlock; blockNum += 1) {\n                  blockNums.push(blockNum);\n                }\n\n                _context4.next = 46;\n                return Promise.all(blockNums.map(\n                /*#__PURE__*/\n                function () {\n                  var _ref5 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee3(blockNum) {\n                    var block;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return web3.eth.getBlock(blockNum);\n\n                          case 2:\n                            block = _context3.sent;\n                            _context3.next = 5;\n                            return Promise.all(block.transactions.map(\n                            /*#__PURE__*/\n                            function () {\n                              var _ref6 = _asyncToGenerator(\n                              /*#__PURE__*/\n                              _regeneratorRuntime.mark(function _callee2(txHash) {\n                                var tx;\n                                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        _context2.next = 2;\n                                        return web3.eth.getTransaction(txHash);\n\n                                      case 2:\n                                        tx = _context2.sent;\n\n                                        if (tx.value !== '0' && tx.to.toLowerCase() === _address) {\n                                          _this3.core.addHistoryEvent({\n                                            id: tx.hash,\n                                            asset: _this3.id,\n                                            type: 'send',\n                                            value: tx.value,\n                                            from: tx.from,\n                                            to: tx.to,\n                                            message: tx.input.length > 2 ? web3.utils.toUtf8(tx.input) : null,\n                                            tx: tx.hash,\n                                            timestamp: block.timestamp\n                                          });\n                                        }\n\n                                      case 4:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2);\n                              }));\n\n                              return function (_x5) {\n                                return _ref6.apply(this, arguments);\n                              };\n                            }()));\n\n                          case 5:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x4) {\n                    return _ref5.apply(this, arguments);\n                  };\n                }()));\n\n              case 46:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[8, 30, 34, 42], [35,, 37, 41]]);\n      }));\n\n      function scanBlocks(_x, _x2, _x3) {\n        return _scanBlocks.apply(this, arguments);\n      }\n\n      return scanBlocks;\n    }()\n  }, {\n    key: \"getBalanceDelta\",\n    value: function getBalanceDelta(address, startBlock, endBlock) {\n      var web3 = this.getWeb3();\n      return this.core.getHistoryEvents({\n        asset: this.id,\n        fromBlock: startBlock,\n        toBlock: endBlock\n      }).filter(function (event) {\n        return event.to === address || event.from === address;\n      }).reduce(function (reducer, event) {\n        return event.to === address ? web3.utils.toBN(reducer).add(web3.utils.toBN(event.value)) : web3.utils.toBN(reducer).sub(web3.utils.toBN(event.value));\n      }, '0');\n    }\n  }, {\n    key: \"getSendFee\",\n    value: function () {\n      var _getSendFee = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(from, to) {\n        var web3, _ref7, _ref8, gas, gasPrice;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                web3 = this.getWeb3();\n                _context5.next = 3;\n                return Promise.all([web3.eth.estimateGas({\n                  from: from,\n                  to: to,\n                  value: '1'\n                }), web3.eth.getGasPrice()]);\n\n              case 3:\n                _ref7 = _context5.sent;\n                _ref8 = _slicedToArray(_ref7, 2);\n                gas = _ref8[0];\n                gasPrice = _ref8[1];\n                return _context5.abrupt(\"return\", toBN(gas).mul(toBN(gasPrice)).toString());\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getSendFee(_x6, _x7) {\n        return _getSendFee.apply(this, arguments);\n      }\n\n      return getSendFee;\n    }()\n  }, {\n    key: \"_send\",\n    value: function () {\n      var _send2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(_ref9) {\n        var message, params, web3, data, receipt;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                message = _ref9.message, params = _objectWithoutProperties(_ref9, [\"message\"]);\n                web3 = this.getWeb3();\n                data = message ? web3.utils.fromUtf8(message) : undefined;\n                _context6.next = 5;\n                return web3.eth.sendTransaction(_objectSpread({\n                  data: data\n                }, params));\n\n              case 5:\n                receipt = _context6.sent;\n                return _context6.abrupt(\"return\", _objectSpread({}, receipt, {\n                  txHash: receipt.transactionHash,\n                  id: receipt.transactionHash\n                }));\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _send(_x8) {\n        return _send2.apply(this, arguments);\n      }\n\n      return _send;\n    }()\n  }, {\n    key: \"getTx\",\n    value: function () {\n      var _getTx = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(txHash) {\n        var web3, _ref10, _ref11, tx, receipt, log;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                web3 = this.getWeb3();\n                _context7.next = 3;\n                return Promise.all([web3.eth.getTransaction(txHash), web3.eth.getTransactionReceipt(txHash)]);\n\n              case 3:\n                _ref10 = _context7.sent;\n                _ref11 = _slicedToArray(_ref10, 2);\n                tx = _ref11[0];\n                receipt = _ref11[1];\n\n                if (!(!tx || !receipt)) {\n                  _context7.next = 9;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", null);\n\n              case 9:\n                if (!(receipt.logs.length > 0 && this.getTransferLog(receipt.logs))) {\n                  _context7.next = 21;\n                  break;\n                }\n\n                log = this.getTransferLog(receipt.logs);\n                _context7.t0 = this.id;\n                _context7.t1 = this.name;\n                _context7.t2 = log.args.from;\n                _context7.t3 = log.args.to;\n                _context7.t4 = log.args.value;\n                _context7.t5 = this.getDisplayValue(log.args.value);\n                _context7.next = 19;\n                return this._getBlockTimestamp(log.blockNumber);\n\n              case 19:\n                _context7.t6 = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  asset: _context7.t0,\n                  assetName: _context7.t1,\n                  from: _context7.t2,\n                  to: _context7.t3,\n                  value: _context7.t4,\n                  displayValue: _context7.t5,\n                  message: null,\n                  timestamp: _context7.t6\n                });\n\n              case 21:\n                _context7.t7 = this.id;\n                _context7.t8 = this.name;\n                _context7.t9 = tx.from;\n                _context7.t10 = tx.to;\n                _context7.t11 = tx.value;\n                _context7.t12 = this.getDisplayValue(tx.value);\n                _context7.t13 = tx.input.length > 2 ? web3.utils.toUtf8(tx.input) : null;\n                _context7.next = 30;\n                return this._getBlockTimestamp(tx.blockNumber);\n\n              case 30:\n                _context7.t14 = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  asset: _context7.t7,\n                  assetName: _context7.t8,\n                  from: _context7.t9,\n                  to: _context7.t10,\n                  value: _context7.t11,\n                  displayValue: _context7.t12,\n                  message: _context7.t13,\n                  timestamp: _context7.t14\n                });\n\n              case 32:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getTx(_x9) {\n        return _getTx.apply(this, arguments);\n      }\n\n      return getTx;\n    }()\n  }, {\n    key: \"getTransferLog\",\n    value: function getTransferLog(logs) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = logs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var log = _step2.value;\n\n          if (log.topics[0] === TRANSFER_TOPIC && (log.address === toChecksumAddress(log.topics[1].substr(26)) || log.address === toChecksumAddress(log.topics[2].substr(26)))) {\n            return _objectSpread({}, log, {\n              args: {\n                from: toChecksumAddress(log.topics[1].substr(26)),\n                to: toChecksumAddress(log.topics[2].substr(26)),\n                value: hexToNumberString(log.data)\n              }\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return NativeAsset;\n}(Asset);\n\nmodule.exports = NativeAsset;","map":null,"metadata":{},"sourceType":"script"}