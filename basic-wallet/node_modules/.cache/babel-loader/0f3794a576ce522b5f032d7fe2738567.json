{"ast":null,"code":"const promiseToCallback = require('promise-to-callback');\n\nmodule.exports = createAsyncMiddleware;\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return (req, res, next, end) => {\n    let nextDonePromise = null;\n    const finishedPromise = asyncMiddleware(req, res, getNextPromise);\n    promiseToCallback(finishedPromise)(err => {\n      // async middleware ended\n      if (nextDonePromise) {\n        // next handler was called - complete nextHandler\n        promiseToCallback(nextDonePromise)((nextErr, nextHandlerSignalDone) => {\n          // nextErr is only present if something went really wrong\n          // if an error is thrown after `await next()` it appears as `err` and not `nextErr`\n          if (nextErr) {\n            console.error(nextErr);\n            return end(nextErr);\n          }\n\n          nextHandlerSignalDone(err);\n        });\n      } else {\n        // next handler was not called - complete middleware\n        end(err);\n      }\n    });\n\n    async function getNextPromise() {\n      nextDonePromise = getNextDoneCallback();\n      await nextDonePromise;\n      return undefined;\n    }\n\n    function getNextDoneCallback() {\n      return new Promise(resolve => {\n        next(cb => resolve(cb));\n      });\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}