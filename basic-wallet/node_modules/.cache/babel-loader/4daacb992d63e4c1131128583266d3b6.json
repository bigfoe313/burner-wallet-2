{"ast":null,"code":"const axios = require('axios');\n\nconst logreq = process.env.httpsendlog;\nconst logmaxlen = 120;\n\nclass HttpWrapper {\n  constructor(opts) {\n    this.provider = axios.create(Object.assign({\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }, opts));\n\n    if (logreq) {\n      this.provider.interceptors.response.use(function (response) {\n        console.log(\"got response:\", response.config.url, JSON.stringify(response.data).slice(0, logmaxlen));\n        return response;\n      }, function (error) {\n        const errData = error.response ? error.response.data : {\n          error: error.message\n        };\n        const errStr = (typeof errData === 'string' ? errData : JSON.stringify(errData)).slice(0, logmaxlen);\n        const errUrl = error.response ? error.response.config.url : error.address;\n        console.log(\"got response:\", errUrl, \"err=\", errStr);\n        return Promise.reject(error);\n      });\n    }\n  }\n\n  send(url, jsonRequestData, callback) {\n    this.sendPromise(url, jsonRequestData || {}).then(data => callback(null, data)).catch(err => callback(err, null));\n  }\n\n  sendPromise(url, jsonRequestData) {\n    if (logreq) {\n      console.log(\"sending request:\", url, JSON.stringify(jsonRequestData || {}).slice(0, logmaxlen));\n    }\n\n    return this.provider.post(url, jsonRequestData).then(res => res.data).catch(err => Promise.reject(err.response ? err.response.data : {\n      error: err.message\n    }));\n  }\n\n}\n\nmodule.exports = HttpWrapper;","map":null,"metadata":{},"sourceType":"script"}