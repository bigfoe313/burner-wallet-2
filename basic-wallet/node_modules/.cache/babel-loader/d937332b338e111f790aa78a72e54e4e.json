{"ast":null,"code":"import Web3 from 'web3';\nimport Pair from './Pair';\nconst toBN = Web3.utils.toBN;\nconst UNISWAP_FACTORY_ADDRESS = '0xc0a47dfe034b400b47bdad5fecda2621de6c4d95';\nconst UNISWAP_NETWORK = '1';\nconst DEADLINE = 1742680400;\nlet _abis = null;\n\nconst getABI = async contract => {\n  if (!_abis) {\n    _abis = await import('./abis');\n  }\n\n  return _abis[contract];\n};\n\nexport default class Uniswap extends Pair {\n  constructor(asset) {\n    super({\n      assetA: asset,\n      assetB: 'eth'\n    });\n    this.exchangeAddress = null;\n  }\n\n  async getContract() {\n    const web3 = this.getExchange().getWeb3(UNISWAP_NETWORK);\n    const exchangeAddress = await this.getExchangeAddress();\n    const contract = new web3.eth.Contract((await getABI('uniswapToken')), exchangeAddress);\n    return contract;\n  }\n\n  async getExchangeAddress() {\n    if (!this.exchangeAddress) {\n      const web3 = this.getExchange().getWeb3(UNISWAP_NETWORK);\n      const factoryContract = new web3.eth.Contract((await getABI('uniswapFactory')), UNISWAP_FACTORY_ADDRESS);\n      const asset = this.getExchange().getAsset(this.assetA);\n      const exchangeAddress = await factoryContract.methods.getExchange(asset.address).call();\n\n      if (!exchangeAddress) {\n        throw new Error(\"Can not find Uniswap exchange for asset \".concat(this.assetA));\n      }\n\n      console.log(\"Found Uniswap for \".concat(this.assetA, \" at \").concat(exchangeAddress));\n      this.exchangeAddress = exchangeAddress;\n    }\n\n    return this.exchangeAddress;\n  }\n\n  async exchangeAtoB({\n    account,\n    value,\n    ether\n  }) {\n    const _value = this._getValue({\n      value,\n      ether\n    });\n\n    const asset = this.getExchange().getAsset(this.assetA);\n    const contract = await this.getContract();\n    const uniswapAllowance = await asset.allowance(account, this.exchangeAddress);\n\n    if (toBN(uniswapAllowance).lt(toBN(_value))) {\n      const allowanceReceipt = await asset.approve(account, this.exchangeAddress, _value);\n      console.log(allowanceReceipt);\n    }\n\n    return await contract.methods.tokenToEthSwapInput(_value, 1, DEADLINE).send({\n      from: account\n    });\n  }\n\n  async exchangeBtoA({\n    account,\n    value,\n    ether\n  }) {\n    const _value = this._getValue({\n      value,\n      ether\n    });\n\n    const contract = await this.getContract();\n    return contract.methods.ethToTokenSwapInput(1, DEADLINE).send({\n      from: account,\n      value: _value\n    });\n  }\n\n  async estimateAtoB(value) {\n    const contract = await this.getContract();\n    const output = await contract.methods.getTokenToEthInputPrice(this._getValue(value)).call();\n    return {\n      estimate: output,\n      estimateInfo: null\n    };\n  }\n\n  async estimateBtoA(value) {\n    const contract = await this.getContract();\n    const output = await contract.methods.getEthToTokenInputPrice(this._getValue(value)).call();\n    return {\n      estimate: output,\n      estimateInfo: null\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}