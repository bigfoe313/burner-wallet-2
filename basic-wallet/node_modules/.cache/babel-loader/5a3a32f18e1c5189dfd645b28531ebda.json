{"ast":null,"code":"const Gateway = require('./Gateway');\n\nconst Web3 = require('web3');\n\nclass InfuraGateway extends Gateway {\n  constructor(infuraKey) {\n    super();\n    this.available = !!infuraKey;\n\n    if (!infuraKey) {\n      throw new Error('InfuraGateway created without API Key. Your project might need a .env file');\n    }\n\n    this.providerStrings = {\n      '1': \"wss://mainnet.infura.io/ws/v3/\".concat(infuraKey),\n      '3': \"wss://ropsten.infura.io/ws/v3/\".concat(infuraKey),\n      '4': \"wss://rinkeby.infura.io/ws/v3/\".concat(infuraKey),\n      '5': \"wss://goerli.infura.io/ws/v3/\".concat(infuraKey),\n      '42': \"wss://kovan.infura.io/ws/v3/\".concat(infuraKey)\n    };\n    this.providers = {};\n    this.stopping = false;\n  }\n\n  isAvailable() {\n    return this.available;\n  }\n\n  getNetworks() {\n    return ['1', '3', '4', '5', '42'];\n  }\n\n  _provider(network) {\n    if (!this.providers[network]) {\n      this._makeProvider(network);\n    }\n\n    return this.providers[network];\n  }\n\n  _makeProvider(network) {\n    if (!this.providerStrings[network]) {\n      throw new Error(\"Network \".concat(network, \" not supported by InfuraGateway\"));\n    }\n\n    this.providers[network] = new Web3.providers.WebsocketProvider(this.providerStrings[network]);\n    this.providers[network].on('end', e => {\n      if (!this.stopping) {\n        console.log('WS closed. Attempting to reconnect...');\n\n        this._makeProvider(network);\n      }\n    });\n  }\n\n  send(network, payload) {\n    return new Promise((resolve, reject) => {\n      if (this.getNetworks().indexOf(network) === -1) {\n        return reject(new Error('Infura does not support this network'));\n      }\n\n      this._provider(network).send(payload, (err, response) => {\n        if (err || response.error) {\n          reject(err || response.error);\n        } else {\n          resolve(response.result);\n        }\n      });\n    });\n  }\n\n  stop() {\n    this.stopping = true;\n    Object.values(this.providers).forEach(provider => provider.disconnect());\n    this.providers = {};\n  }\n\n}\n\nmodule.exports = InfuraGateway;","map":null,"metadata":{},"sourceType":"script"}