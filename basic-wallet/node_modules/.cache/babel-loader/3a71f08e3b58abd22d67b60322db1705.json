{"ast":null,"code":"import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { withBurner, SubProvider } from './BurnerProvider';\nimport i18n from './i18n';\n\nconst wrapComponent = (Component, plugin) => {\n  const WrappedComponent = props => {\n    const _useTranslation = useTranslation(plugin.id),\n          t = _useTranslation.t;\n\n    const InnerWrappedComponent = withBurner(Component);\n    return React.createElement(SubProvider, {\n      t: t\n    }, React.createElement(InnerWrappedComponent, Object.assign({\n      plugin: plugin\n    }, props)));\n  };\n\n  return WrappedComponent;\n};\n\nexport const DEFAULT_PLUGIN_DATA = {\n  pages: [],\n  buttons: {},\n  elements: {},\n  accountSearches: [],\n  tryHandleQR: () => false,\n  sent: () => null,\n  getAddressName: () => Promise.resolve(null),\n  startup: () => null\n};\nexport default class Plugins {\n  constructor(plugins, ui) {\n    this.changeListeners = [];\n    this.qrHandlers = [];\n    this.startupListeners = [];\n    this.sentHandlers = [];\n    this.addressToNameResolvers = [];\n    this.messageListeners = {};\n    this.ui = ui;\n    this.pluginData = { ...DEFAULT_PLUGIN_DATA,\n      tryHandleQR: this.tryHandleQR.bind(this),\n      sent: this.sent.bind(this),\n      getAddressName: this.getAddressName.bind(this),\n      startup: this.startup.bind(this)\n    };\n    plugins.forEach(plugin => plugin.initializePlugin(this.getPluginContext(plugin)));\n  }\n\n  onDataChange(listener) {\n    this.changeListeners.push(listener);\n  }\n\n  getData() {\n    return this.pluginData;\n  }\n\n  getPluginContext(plugin) {\n    return {\n      addElement: (position, Component, options) => this.addPluginElement(plugin, position, Component, options),\n      onAccountSearch: callback => this.addAccountSearch(callback),\n      onQRScanned: callback => void this.qrHandlers.push(callback),\n      onSent: callback => void this.sentHandlers.push(callback),\n      addPage: (path, Component) => this.addPluginPage(plugin, path, Component),\n      addButton: (position, title, path, options) => this.addPluginButton(plugin, position, title, path, options),\n      addHomeButton: (title, path, options) => this.addPluginButton(plugin, 'home', title, path, options),\n      addAddressToNameResolver: callback => this.addressToNameResolvers.push(callback),\n      addTranslations: translations => this.addTranslations(plugin, translations),\n      getAssets: () => this.ui.getAssets(),\n      getWeb3: (network, options) => this.ui.getCore().getWeb3(network, options),\n      sendPluginMessage: (topic, ...message) => (this.messageListeners[topic] || []).map(listener => listener(...message)),\n      onPluginMessage: (topic, listener) => this.addMessageListener(topic, listener),\n      onStartup: listener => void this.startupListeners.push(listener)\n    };\n  }\n\n  setPluginData(newData) {\n    this.pluginData = { ...this.pluginData,\n      ...newData\n    };\n    this.changeListeners.forEach(listener => listener(this.pluginData));\n  }\n\n  addPluginPage(plugin, path, Component) {\n    const WrappedComponent = wrapComponent(Component, plugin);\n    this.setPluginData({\n      pages: [...this.pluginData.pages, {\n        plugin,\n        path,\n        Component: WrappedComponent\n      }]\n    });\n  }\n\n  addPluginButton(plugin, position, title, path, options) {\n    const existingButtons = this.pluginData.buttons[position] || [];\n    const newButton = {\n      plugin,\n      title,\n      path,\n      options\n    };\n    this.setPluginData({\n      buttons: { ...this.pluginData.buttons,\n        [position]: [...existingButtons, newButton]\n      }\n    });\n    let hasRemoved = false;\n\n    const remove = () => {\n      if (hasRemoved) {\n        throw new Error('This button has already been removed');\n      }\n\n      this.setPluginData({\n        buttons: { ...this.pluginData.buttons,\n          [position]: this.pluginData.buttons[position].filter(button => button !== newButton)\n        }\n      });\n      hasRemoved = true;\n    };\n\n    return {\n      remove\n    };\n  }\n\n  addPluginElement(plugin, position, Component, options) {\n    const WrappedComponent = wrapComponent(Component, plugin);\n    const existingElements = this.pluginData.elements[position] || [];\n    this.setPluginData({\n      elements: { ...this.pluginData.elements,\n        [position]: [...existingElements, {\n          plugin,\n          Component: WrappedComponent,\n          options\n        }]\n      }\n    });\n  }\n\n  addTranslations(plugin, translations) {\n    if (!plugin.id) {\n      throw new Error('Can not add translations without plugin ID');\n    }\n\n    Object.entries(translations).forEach(([lang, resources]) => i18n.addResources(lang, plugin.id, resources));\n  }\n\n  addAccountSearch(callback) {\n    this.setPluginData({\n      accountSearches: [...this.pluginData.accountSearches, callback]\n    });\n  }\n\n  addMessageListener(topic, callback) {\n    this.messageListeners[topic] = [...(this.messageListeners[topic] || []), callback];\n  }\n\n  async getAddressName(address) {\n    for (const resolver of this.addressToNameResolvers) {\n      const name = await resolver(address);\n\n      if (name) {\n        return name;\n      }\n    }\n\n    return null;\n  }\n\n  tryHandleQR(qr, context) {\n    for (const handler of this.qrHandlers) {\n      if (handler(qr, context)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  startup(context) {\n    for (const handler of this.startupListeners) {\n      handler(context);\n    }\n  }\n\n  sent(data) {\n    let redirect = null;\n\n    for (const listener of this.sentHandlers) {\n      const response = listener(data);\n\n      if (!redirect && response && response.length) {\n        redirect = response;\n      }\n    }\n\n    return redirect;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}