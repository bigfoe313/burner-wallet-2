{"ast":null,"code":"import Pair from './Pair';\nexport default class Bridge extends Pair {\n  constructor({\n    assetA,\n    assetABridge,\n    assetB,\n    assetBBridge\n  }) {\n    super({\n      assetA,\n      assetB\n    });\n    this.assetABridge = assetABridge;\n    this.assetBBridge = assetBBridge;\n  }\n\n  async exchangeAtoB({\n    account,\n    value,\n    ether\n  }) {\n    const _value = this._getValue({\n      value,\n      ether\n    });\n\n    const asset = this.getExchange().getAsset(this.assetA);\n    const result = await asset.send({\n      from: account,\n      value: _value,\n      to: this.assetABridge\n    });\n    await this.detectExchangeAToBFinished(account, _value, result);\n    return result;\n  }\n\n  async exchangeBtoA({\n    account,\n    value,\n    ether\n  }) {\n    const _value = this._getValue({\n      value,\n      ether\n    });\n\n    const asset = this.getExchange().getAsset(this.assetB);\n    const result = await asset.send({\n      from: account,\n      value: _value,\n      to: this.assetBBridge\n    });\n    await this.detectExchangeBToAFinished(account, _value, result);\n    return result;\n  }\n\n  async estimateAtoB(value) {\n    return {\n      estimate: this._getValue(value),\n      estimateInfo: null\n    };\n  }\n\n  async estimateBtoA(value) {\n    return {\n      estimate: this._getValue(value),\n      estimateInfo: null\n    };\n  }\n\n  getLoadingMessage() {\n    return 'Exchanging assets.. please wait until the bridge relays the transaction';\n  }\n\n  async detectExchangeBToAFinished(account, value, sendResult) {\n    throw new Error('detect exchange B to A finished not implemented');\n  }\n\n  async detectExchangeAToBFinished(account, value, sendResult) {\n    throw new Error('detect exchange A to B finished not implemented');\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}