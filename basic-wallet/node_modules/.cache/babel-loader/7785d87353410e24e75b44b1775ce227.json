{"ast":null,"code":"import ENS from './ENS';\nexport default class ENSPlugin {\n  constructor(network = '1') {\n    this.ensCache = {};\n    this.reverseCache = {};\n    this.ens = null;\n    this.network = network;\n  }\n\n  initializePlugin(pluginContext) {\n    this.ens = new ENS(pluginContext.getWeb3(this.network), this.network);\n    pluginContext.addAddressToNameResolver(address => this.lookupName(address));\n    pluginContext.onAccountSearch(search => search.length > 3 && search.indexOf('.') !== -1 ? this.ensSearch(search) : Promise.resolve([]));\n  }\n\n  async lookupName(address) {\n    if (this.reverseCache[address] !== undefined) {\n      return this.reverseCache[address];\n    }\n\n    try {\n      const name = await this.ens.reverseLookup(address);\n      this.reverseCache[address] = name;\n      return name;\n    } catch (e) {\n      console.warn('Reverse ENS error', e);\n      return null;\n    }\n  }\n\n  async ensSearch(search) {\n    const cached = this.ensCache[search];\n\n    if (cached !== undefined) {\n      return cached ? [{\n        name: search,\n        address: cached\n      }] : [];\n    }\n\n    const address = await this.ens.getAddress(search);\n    this.ensCache[search] = address;\n    return address ? [{\n      name: search,\n      address\n    }] : [];\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}