{"ast":null,"code":"import './loaderDefs';\nimport 'file-loader?name=burnerconnect-bridge.html!./burnerconnect-bridge.html';\nimport 'file-loader?name=burnerconnect-login.html!./burnerconnect-login.html';\n\nconst serializeAsset = asset => ({\n  id: asset.id,\n  name: asset.name,\n  network: asset.network,\n  type: asset.type,\n  icon: asset.icon,\n  address: asset.address || null\n});\n\nif (window.opener && window.opener.origin === window.origin) {\n  window.opener.postMessage({\n    localStorage: { ...localStorage\n    }\n  }, window.origin);\n}\n\nconst isSafari = /^((?!chrome|android).)*safari/i.test(window.navigator.userAgent);\nexport default class BunerConnectBridge {\n  constructor(core) {\n    this.core = core;\n    window.addEventListener('message', async event => {\n      const response = await this.handleMessage(event.data);\n      console.log('got', event.data, 'responding', response);\n\n      if (response) {\n        event.source.postMessage({\n          response,\n          id: event.data.id\n        }, event.origin);\n      }\n    });\n    core.onAccountChange(accounts => {\n      window.parent.postMessage({\n        message: 'accountsChanged',\n        accounts\n      }, '*');\n    });\n\n    if (window.parent) {\n      window.parent.postMessage({\n        message: 'frameLoaded'\n      }, '*');\n    }\n  }\n\n  handleMessage({\n    command,\n    params,\n    id\n  }) {\n    switch (command) {\n      case 'send':\n        return this.send(id, params);\n\n      case 'getAssets':\n        return this.core.getAssets().map(serializeAsset);\n\n      case 'requiresPopup':\n        return isSafari;\n\n      case 'popup':\n        return this.awaitPopup();\n\n      default:\n        if (command) {\n          console.error(\"Unknown command \".concat(command));\n        }\n\n    }\n  }\n\n  send(id, {\n    jsonrpc,\n    network,\n    method,\n    params\n  }) {\n    return new Promise((resolve, reject) => {\n      const provider = this.core.getProvider(network);\n      provider.sendAsync({\n        jsonrpc,\n        id,\n        method,\n        params\n      }, (err, result) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(result);\n      });\n    });\n  }\n\n  awaitPopup() {\n    return new Promise(resolve => {\n      const content = document.querySelector('#content');\n      content.innerHTML = '';\n      const button = document.createElement('button');\n      button.innerText = 'Connect';\n      content.appendChild(button);\n      button.addEventListener('click', () => {\n        let popup = null;\n\n        const listener = e => {\n          if (e.data.localStorage) {\n            console.log('Got localstorage', e.data.localStorage);\n            this.batchSetLocalstorage(e.data.localStorage);\n            popup.close();\n            resolve({\n              success: true\n            });\n            window.removeEventListener('message', listener);\n          }\n        };\n\n        window.addEventListener('message', listener);\n        popup = window.open(window.location.href, '_blank');\n      });\n      window.parent.postMessage({\n        message: 'setSize',\n        height: document.body.clientHeight\n      }, '*');\n    });\n  }\n\n  batchSetLocalstorage(storage) {\n    for (const key in storage) {\n      window.localStorage.setItem(key, storage[key]);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}