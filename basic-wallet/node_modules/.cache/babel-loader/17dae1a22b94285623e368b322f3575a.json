{"ast":null,"code":"const EventEmitter = require('../lib/EventEmitter');\n\nclass Signer {\n  constructor({\n    id = null\n  } = {}) {\n    this.events = new EventEmitter();\n    this.accounts = [];\n    this.core = null;\n    this.id = id;\n  }\n\n  setCore(core) {\n    this.core = core;\n  }\n\n  isAvailable() {\n    return true;\n  }\n\n  getAccounts() {\n    return this.accounts;\n  }\n\n  hasAccount(account) {\n    return this.getAccounts().map(address => address.toLowerCase()).indexOf(account.toLowerCase()) !== -1;\n  }\n\n  signTx() {\n    throw new Error('signTx() not implemented');\n  }\n\n  signMsg() {\n    throw new Error('singMsg() not implemented');\n  }\n\n  shouldSkipSigning() {\n    return false;\n  }\n\n  onAccountChange(callback) {\n    this.events.on('accountChange', callback);\n  }\n\n  permissions() {\n    return [];\n  }\n\n  invoke(action, account) {\n    throw new Error('invoke not implemented');\n  }\n\n}\n\nmodule.exports = Signer;","map":null,"metadata":{},"sourceType":"script"}