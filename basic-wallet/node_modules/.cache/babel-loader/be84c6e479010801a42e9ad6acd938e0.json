{"ast":null,"code":"import React, { Component } from 'react';\nimport { BrowserRouter, HashRouter, MemoryRouter } from 'react-router-dom';\nimport './i18n';\nimport dataProviders from './data-providers';\nimport BurnerProvider from './BurnerProvider';\nimport BurnerRouter from './BurnerRouter';\nimport Plugins from './Plugins';\nconst routers = {\n  browser: BrowserRouter,\n  hash: HashRouter,\n  memory: MemoryRouter\n};\nconst REQUIRED_PAGES = ['/', '/confirm', '/pk'];\nexport default class BurnerUICore extends Component {\n  constructor(props) {\n    super(props);\n    const internalPlugins = this.getInternalPlugins();\n\n    const _plugins = props.plugins ? [...internalPlugins, ...props.plugins] : internalPlugins;\n\n    this.plugins = new Plugins(_plugins, this);\n    this.state = {\n      pluginData: this.plugins.getData()\n    };\n    this._burnerComponents = { ...dataProviders,\n      ...this.burnerComponents()\n    };\n  }\n\n  getInternalPlugins() {\n    return [];\n  }\n\n  componentDidMount() {\n    this.plugins.onDataChange(pluginData => this.setState({\n      pluginData\n    }));\n    const loader = document.querySelector('#loader');\n\n    if (loader) {\n      loader.parentNode.removeChild(loader);\n    }\n  }\n\n  getCore() {\n    return this.props.core;\n  }\n\n  getAssets() {\n    return this.props.core.getAssets();\n  }\n\n  router() {\n    return React.createElement(BurnerRouter, {\n      pluginData: this.state.pluginData,\n      pages: this.getPages()\n    });\n  }\n\n  render() {\n    const Router = routers[this.props.router];\n    return React.createElement(Router, null, React.createElement(BurnerProvider, {\n      core: this.props.core,\n      pluginData: this.state.pluginData,\n      burnerComponents: this._burnerComponents\n    }, this.content()));\n  }\n\n}\nBurnerUICore.defaultProps = {\n  plugins: [],\n  router: 'browser'\n};","map":null,"metadata":{},"sourceType":"module"}