{"ast":null,"code":"\"use strict\";\n\nclass Semaphore {\n  constructor(count) {\n    this.tasks = [];\n    this.count = count;\n  }\n\n  sched() {\n    if (this.count > 0 && this.tasks.length > 0) {\n      this.count--;\n      let next = this.tasks.shift();\n\n      if (next === undefined) {\n        throw \"Unexpected undefined value in tasks list\";\n      }\n\n      next();\n    }\n  }\n\n  acquire() {\n    return new Promise((res, rej) => {\n      var task = () => {\n        var released = false;\n        res(() => {\n          if (!released) {\n            released = true;\n            this.count++;\n            this.sched();\n          }\n        });\n      };\n\n      this.tasks.push(task);\n\n      if (process && process.nextTick) {\n        process.nextTick(this.sched.bind(this));\n      } else {\n        setImmediate(this.sched.bind(this));\n      }\n    });\n  }\n\n  use(f) {\n    return this.acquire().then(release => {\n      return f().then(res => {\n        release();\n        return res;\n      }).catch(err => {\n        release();\n        throw err;\n      });\n    });\n  }\n\n}\n\nexports.Semaphore = Semaphore;\n\nclass Mutex extends Semaphore {\n  constructor() {\n    super(1);\n  }\n\n}\n\nexports.Mutex = Mutex;","map":null,"metadata":{},"sourceType":"script"}