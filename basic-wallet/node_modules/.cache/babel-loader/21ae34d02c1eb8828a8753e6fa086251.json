{"ast":null,"code":"import _regeneratorRuntime from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Bridge from \"./Bridge\";\nvar bridgeAAbi = [{\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": false,\n    \"name\": \"recipient\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"value\",\n    \"type\": \"uint256\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"transactionHash\",\n    \"type\": \"bytes32\"\n  }],\n  \"name\": \"AffirmationCompleted\",\n  \"type\": \"event\"\n}];\nvar bridgeBAbi = [{\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": false,\n    \"name\": \"recipient\",\n    \"type\": \"address\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"value\",\n    \"type\": \"uint256\"\n  }, {\n    \"indexed\": false,\n    \"name\": \"transactionHash\",\n    \"type\": \"bytes32\"\n  }],\n  \"name\": \"RelayedMessage\",\n  \"type\": \"event\"\n}];\n\nvar wait = function wait(time) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, time);\n  });\n};\n\nvar TIMEOUT = 180000;\n\nvar XDaiBridge =\n/*#__PURE__*/\nfunction (_Bridge) {\n  _inherits(XDaiBridge, _Bridge);\n\n  function XDaiBridge() {\n    _classCallCheck(this, XDaiBridge);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(XDaiBridge).call(this, {\n      assetA: 'xdai',\n      assetABridge: '0x7301cfa0e1756b71869e93d4e4dca5c7d0eb0aa6',\n      assetB: 'dai',\n      assetBBridge: '0x4aa42145Aa6Ebf72e164C9bBC74fbD3788045016'\n    }));\n  }\n\n  _createClass(XDaiBridge, [{\n    key: \"detectExchangeBToAFinished\",\n    value: function () {\n      var _detectExchangeBToAFinished = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(account, value, sendResult) {\n        var asset, web3, contract, fromBlock, stopTime, currentBlock, events, confirmationEvent;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                asset = this.getExchange().getAsset(this.assetA);\n                web3 = asset.getWeb3();\n                contract = new web3.eth.Contract(bridgeAAbi, this.assetABridge);\n                _context.next = 5;\n                return web3.eth.getBlockNumber();\n\n              case 5:\n                fromBlock = _context.sent;\n                stopTime = Date.now() + TIMEOUT;\n\n              case 7:\n                if (!(Date.now() <= stopTime)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                _context.next = 10;\n                return web3.eth.getBlockNumber();\n\n              case 10:\n                currentBlock = _context.sent;\n                _context.next = 13;\n                return contract.getPastEvents('AffirmationCompleted', {\n                  fromBlock: fromBlock,\n                  toBlock: currentBlock\n                });\n\n              case 13:\n                events = _context.sent;\n                confirmationEvent = events.filter(function (event) {\n                  return event.returnValues.transactionHash === sendResult.txHash;\n                });\n\n                if (!(confirmationEvent.length > 0)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 17:\n                fromBlock = currentBlock;\n                _context.next = 20;\n                return wait(5000);\n\n              case 20:\n                _context.next = 7;\n                break;\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function detectExchangeBToAFinished(_x, _x2, _x3) {\n        return _detectExchangeBToAFinished.apply(this, arguments);\n      }\n\n      return detectExchangeBToAFinished;\n    }()\n  }, {\n    key: \"detectExchangeAToBFinished\",\n    value: function () {\n      var _detectExchangeAToBFinished = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(account, value, sendResult) {\n        var web3, contract, fromBlock, stopTime, currentBlock, events, confirmationEvent;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = this.getExchange().getAsset(this.assetB).getWeb3();\n                contract = new web3.eth.Contract(bridgeBAbi, this.assetBBridge);\n                _context2.next = 4;\n                return web3.eth.getBlockNumber();\n\n              case 4:\n                fromBlock = _context2.sent;\n                stopTime = Date.now() + TIMEOUT;\n\n              case 6:\n                if (!(Date.now() <= stopTime)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                _context2.next = 9;\n                return web3.eth.getBlockNumber();\n\n              case 9:\n                currentBlock = _context2.sent;\n                _context2.next = 12;\n                return contract.getPastEvents('RelayedMessage', {\n                  fromBlock: fromBlock,\n                  toBlock: currentBlock\n                });\n\n              case 12:\n                events = _context2.sent;\n                confirmationEvent = events.filter(function (event) {\n                  return event.returnValues.transactionHash === sendResult.txHash;\n                });\n\n                if (!(confirmationEvent.length > 0)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 16:\n                fromBlock = currentBlock;\n                _context2.next = 19;\n                return wait(10000);\n\n              case 19:\n                _context2.next = 6;\n                break;\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function detectExchangeAToBFinished(_x4, _x5, _x6) {\n        return _detectExchangeAToBFinished.apply(this, arguments);\n      }\n\n      return detectExchangeAToBFinished;\n    }()\n  }]);\n\n  return XDaiBridge;\n}(Bridge);\n\nexport { XDaiBridge as default };","map":null,"metadata":{},"sourceType":"module"}