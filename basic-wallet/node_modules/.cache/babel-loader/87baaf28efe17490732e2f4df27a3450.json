{"ast":null,"code":"var _slicedToArray = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst ERC20Asset = require('./ERC20Asset');\n\nconst IERC777abi = require('./abi/IERC777.json');\n\nconst canRelay = require('./utils/canRelay');\n\nconst BLOCK_LOOKBACK = 250;\n\nclass ERC777Asset extends ERC20Asset {\n  constructor({\n    abi = IERC777abi,\n    gasless = false,\n    ...params\n  }) {\n    super({ ...params,\n      type: 'erc777'\n    });\n    this.abi = abi;\n    this.gasless = gasless;\n    this._gaslessContract = null;\n  }\n\n  supportsMessages() {\n    return true;\n  }\n\n  getGaslessContract() {\n    if (!this._gaslessContract) {\n      const Contract = this.getWeb3({\n        gasless: true\n      }).eth.Contract;\n      this._gaslessContract = new Contract(this.abi, this.address);\n    }\n\n    return this._gaslessContract;\n  }\n\n  async getTx(txHash) {\n    const events = await this._getEventsFromTx(txHash);\n\n    const _events$filter = events.filter(event => event.event === 'Sent'),\n          _events$filter2 = _slicedToArray(_events$filter, 1),\n          transferEvent = _events$filter2[0];\n\n    if (!transferEvent) {\n      return null;\n    }\n\n    return {\n      asset: this.id,\n      assetName: this.name,\n      from: transferEvent.returnValues.from,\n      to: transferEvent.returnValues.to,\n      value: transferEvent.returnValues.amount.toString(),\n      displayValue: this.getDisplayValue(transferEvent.returnValues.amount.toString()),\n      message: transferEvent.returnValues.data ? this.getWeb3().utils.toUtf8(transferEvent.returnValues.data) : null,\n      timestamp: await this._getBlockTimestamp(transferEvent.blockNumber)\n    };\n  }\n\n  startWatchingAddress(address) {\n    let running = true;\n    let block = 0;\n    return this.poll(async () => {\n      const currentBlock = await this.getWeb3().eth.getBlockNumber();\n\n      if (block === 0) {\n        block = currentBlock - BLOCK_LOOKBACK;\n      }\n\n      const events = await this.getContract().getPastEvents('Sent', {\n        filter: {\n          to: address\n        },\n        fromBlock: block,\n        toBlock: currentBlock\n      });\n      await events.map(async event => this.core.addHistoryEvent({\n        id: \"\".concat(event.transactionHash, \"-\").concat(event.logIndex),\n        asset: this.id,\n        type: 'send',\n        value: event.returnValues.amount.toString(),\n        from: event.returnValues.from,\n        to: event.returnValues.to,\n        message: event.returnValues.data ? this.getWeb3().utils.toUtf8(event.returnValues.data) : null,\n        tx: event.transactionHash,\n        timestamp: await this._getBlockTimestamp(event.blockNumber)\n      }));\n      block = currentBlock;\n    }, this._pollInterval);\n  }\n\n  async _send({\n    from,\n    to,\n    value,\n    message\n  }) {\n    const web3 = this.getWeb3();\n    const messageHex = message ? this.getWeb3().utils.fromUtf8(message) : '0x';\n    const gasless = this.gasless && (await canRelay(web3, this.address, from));\n    const contract = gasless ? this.getGaslessContract() : this.getContract();\n    const receipt = await contract.methods.send(to, value, messageHex).send({\n      from\n    });\n    return { ...receipt,\n      txHash: receipt.transactionHash,\n      id: \"\".concat(receipt.transactionHash, \"-\").concat(receipt.events.Sent.logIndex)\n    };\n  }\n\n}\n\nmodule.exports = ERC777Asset;","map":null,"metadata":{},"sourceType":"script"}