{"ast":null,"code":"import _regeneratorRuntime from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Pair from './Pair';\n\nvar Bridge =\n/*#__PURE__*/\nfunction (_Pair) {\n  _inherits(Bridge, _Pair);\n\n  function Bridge(_ref) {\n    var _this;\n\n    var assetA = _ref.assetA,\n        assetABridge = _ref.assetABridge,\n        assetB = _ref.assetB,\n        assetBBridge = _ref.assetBBridge;\n\n    _classCallCheck(this, Bridge);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Bridge).call(this, {\n      assetA: assetA,\n      assetB: assetB\n    }));\n    _this.assetABridge = assetABridge;\n    _this.assetBBridge = assetBBridge;\n    return _this;\n  }\n\n  _createClass(Bridge, [{\n    key: \"exchangeAtoB\",\n    value: function () {\n      var _exchangeAtoB = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref2) {\n        var account, value, ether, _value, asset, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                account = _ref2.account, value = _ref2.value, ether = _ref2.ether;\n                _value = this._getValue({\n                  value: value,\n                  ether: ether\n                });\n                asset = this.getExchange().getAsset(this.assetA);\n                _context.next = 5;\n                return asset.send({\n                  from: account,\n                  value: _value,\n                  to: this.assetABridge\n                });\n\n              case 5:\n                result = _context.sent;\n                _context.next = 8;\n                return this.detectExchangeAToBFinished(account, _value, result);\n\n              case 8:\n                return _context.abrupt(\"return\", result);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function exchangeAtoB(_x) {\n        return _exchangeAtoB.apply(this, arguments);\n      }\n\n      return exchangeAtoB;\n    }()\n  }, {\n    key: \"exchangeBtoA\",\n    value: function () {\n      var _exchangeBtoA = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref3) {\n        var account, value, ether, _value, asset, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                account = _ref3.account, value = _ref3.value, ether = _ref3.ether;\n                _value = this._getValue({\n                  value: value,\n                  ether: ether\n                });\n                asset = this.getExchange().getAsset(this.assetB);\n                _context2.next = 5;\n                return asset.send({\n                  from: account,\n                  value: _value,\n                  to: this.assetBBridge\n                });\n\n              case 5:\n                result = _context2.sent;\n                _context2.next = 8;\n                return this.detectExchangeBToAFinished(account, _value, result);\n\n              case 8:\n                return _context2.abrupt(\"return\", result);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function exchangeBtoA(_x2) {\n        return _exchangeBtoA.apply(this, arguments);\n      }\n\n      return exchangeBtoA;\n    }()\n  }, {\n    key: \"estimateAtoB\",\n    value: function () {\n      var _estimateAtoB = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(value) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", {\n                  estimate: this._getValue(value),\n                  estimateInfo: null\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function estimateAtoB(_x3) {\n        return _estimateAtoB.apply(this, arguments);\n      }\n\n      return estimateAtoB;\n    }()\n  }, {\n    key: \"estimateBtoA\",\n    value: function () {\n      var _estimateBtoA = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(value) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", {\n                  estimate: this._getValue(value),\n                  estimateInfo: null\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function estimateBtoA(_x4) {\n        return _estimateBtoA.apply(this, arguments);\n      }\n\n      return estimateBtoA;\n    }()\n  }, {\n    key: \"getLoadingMessage\",\n    value: function getLoadingMessage() {\n      return 'Exchanging assets.. please wait until the bridge relays the transaction';\n    }\n  }, {\n    key: \"detectExchangeBToAFinished\",\n    value: function () {\n      var _detectExchangeBToAFinished = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(account, value, sendResult) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                throw new Error('detect exchange B to A finished not implemented');\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function detectExchangeBToAFinished(_x5, _x6, _x7) {\n        return _detectExchangeBToAFinished.apply(this, arguments);\n      }\n\n      return detectExchangeBToAFinished;\n    }()\n  }, {\n    key: \"detectExchangeAToBFinished\",\n    value: function () {\n      var _detectExchangeAToBFinished = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(account, value, sendResult) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                throw new Error('detect exchange A to B finished not implemented');\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function detectExchangeAToBFinished(_x8, _x9, _x10) {\n        return _detectExchangeAToBFinished.apply(this, arguments);\n      }\n\n      return detectExchangeAToBFinished;\n    }()\n  }]);\n\n  return Bridge;\n}(Pair);\n\nexport { Bridge as default };","map":null,"metadata":{},"sourceType":"module"}