{"ast":null,"code":"var _toConsumableArray = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar HistoryEvent = require('./HistoryEvent');\n\nvar STORAGE_KEY = 'burner-history';\n\nvar History =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function History() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$storeHistory = _ref.storeHistory,\n        storeHistory = _ref$storeHistory === void 0 ? true : _ref$storeHistory,\n        _ref$assets = _ref.assets,\n        assets = _ref$assets === void 0 ? [] : _ref$assets;\n\n    _classCallCheck(this, History);\n\n    this.events = [];\n    this.eventsByTx = {};\n    this.eventsById = {};\n    this.assets = assets;\n    this.eventListeners = [];\n    this.storeHistory = storeHistory;\n\n    if (storeHistory) {\n      this.readStoredEvents();\n    }\n  }\n\n  _createClass(History, [{\n    key: \"onEvent\",\n    value: function onEvent(callback) {\n      this.eventListeners.push(callback);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(callback) {\n      this.eventListeners.splice(this.eventListeners.indexOf(callback), 1);\n    }\n  }, {\n    key: \"addEvent\",\n    value: function addEvent(event) {\n      if (this.eventsById[event.id]) {\n        console.warn(\"[History] Tried to add event with duplicate ID \".concat(event.id, \". Ignoring.\"));\n        return;\n      }\n\n      if (this.eventsByTx[event.tx]) {\n        if (event.override) {\n          this.events = this.events.filter(function (event) {\n            return event.tx !== event.tx;\n          });\n        } else {\n          console.warn(\"[History] Duplicate event with TX hash \".concat(event.tx, \". Ignoring.\"));\n          return;\n        }\n      }\n\n      this.events.push(event);\n      this.eventsById[event.id] = event;\n      this.eventsByTx[event.tx] = event;\n      this.eventListeners.forEach(function (callback) {\n        return callback(event);\n      });\n      this.storeEvents();\n    }\n  }, {\n    key: \"getEvents\",\n    value: function getEvents() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var assets;\n\n      if (options.assets) {\n        assets = options.assets;\n      } else if (options.asset) {\n        assets = [options.asset];\n      }\n\n      var filter = function filter(event) {\n        var assetMatch = !assets || assets.indexOf(event.asset) !== -1;\n        var typeMatch = !options.type || event.type === options.type;\n        var accountMatch = !options.account || options.account.toLowerCase() === event.to.toLowerCase() || options.account.toLowerCase() === event.from.toLowerCase();\n        return assetMatch && typeMatch && accountMatch;\n      };\n\n      return this.events.filter(filter).sort(function (e1, e2) {\n        return e2.timestamp - e1.timestamp;\n      });\n    }\n  }, {\n    key: \"storeEvents\",\n    value: function storeEvents() {\n      if (this.storeHistory) {\n        window.localStorage.setItem(STORAGE_KEY, JSON.stringify(this.events));\n      }\n    }\n  }, {\n    key: \"readStoredEvents\",\n    value: function readStoredEvents() {\n      var _this = this;\n\n      if (window.localStorage.getItem(STORAGE_KEY)) {\n        var storedEventObjs = JSON.parse(window.localStorage.getItem(STORAGE_KEY));\n        this.events = [].concat(_toConsumableArray(this.events), _toConsumableArray(storedEventObjs.map(function (event) {\n          return new HistoryEvent(event, _this.assets);\n        })));\n        this.events.forEach(function (event) {\n          _this.eventsById[event.id] = event;\n        });\n      }\n    }\n  }]);\n\n  return History;\n}();\n\nmodule.exports = History;","map":null,"metadata":{},"sourceType":"script"}