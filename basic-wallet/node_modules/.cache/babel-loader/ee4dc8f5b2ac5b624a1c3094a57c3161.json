{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar flatMap = require('lodash.flatmap');\n\nvar BaseFilter = require('./base-filter');\n\nvar getBlocksForRange = require('./getBlocksForRange');\n\nvar _require = require('./hexUtils'),\n    incrementHexInt = _require.incrementHexInt;\n\nvar TxFilter =\n/*#__PURE__*/\nfunction (_BaseFilter) {\n  \"use strict\";\n\n  _inherits(TxFilter, _BaseFilter);\n\n  function TxFilter(_ref) {\n    var _this;\n\n    var provider = _ref.provider,\n        params = _ref.params;\n\n    _classCallCheck(this, TxFilter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TxFilter).call(this));\n    _this.type = 'tx';\n    _this.provider = provider;\n    return _this;\n  }\n\n  _createClass(TxFilter, [{\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref2) {\n        var oldBlock, newBlock, toBlock, fromBlock, blocks, blockTxHashes;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;\n                toBlock = oldBlock;\n                fromBlock = incrementHexInt(oldBlock);\n                _context.next = 5;\n                return getBlocksForRange({\n                  provider: this.provider,\n                  fromBlock: fromBlock,\n                  toBlock: toBlock\n                });\n\n              case 5:\n                blocks = _context.sent;\n                blockTxHashes = flatMap(blocks, function (block) {\n                  return block.transactions;\n                }); // add to results\n\n                this.addResults(blockTxHashes);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }]);\n\n  return TxFilter;\n}(BaseFilter);\n\nmodule.exports = TxFilter;","map":null,"metadata":{},"sourceType":"script"}