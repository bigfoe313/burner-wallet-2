{"ast":null,"code":"const Gateway = require('./Gateway');\n\nconst Web3 = require('web3');\n\nconst tabookey = require('@dmihal/tabookey-gasless');\n\nclass GSNGateway extends Gateway {\n  constructor() {\n    super(['1', '3', '4', '5', '42', '100']);\n    this.isOn = true;\n    this._w3Provider = null;\n    this.clients = {};\n  }\n\n  isAvailable() {\n    return this.isOn;\n  }\n\n  getClient(network) {\n    if (!this.clients[network]) {\n      this.clients[network] = new tabookey.RelayClient(this.core.getWeb3(network), {});\n    }\n\n    return this.clients[network];\n  }\n\n  async sendTx(network, payload) {\n    if (payload.params[0].useGSN) {\n      const client = this.getClient(network);\n      return new Promise((resolve, reject) => {\n        client.runRelay({ ...payload,\n          method: 'eth_sendTransaction'\n        }, (err, result) => {\n          if (err) {\n            return reject(err);\n          }\n\n          resolve(result.result);\n        });\n      });\n    }\n\n    return this.send(network, { ...payload,\n      params: [payload.params[0].signedTransaction]\n    });\n  }\n\n  async send(network, payload) {\n    try {\n      this.isOn = false;\n      const request = this.core.handleRequest(network, payload);\n      this.isOn = true;\n      const response = await request;\n\n      if (payload.method === 'eth_getTransactionReceipt' && response) {\n        this.getClient(network).fixTransactionReceiptResp(response.result);\n      }\n\n      return response;\n    } catch (e) {\n      this.isOn = true;\n      throw e;\n    }\n  }\n\n}\n\nmodule.exports = GSNGateway;","map":null,"metadata":{},"sourceType":"script"}