{"ast":null,"code":"import _slicedToArray from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject5() {\n  const data = _taggedTemplateLiteral([\"\\n  min-height: 18px;\\n  margin: 8px;\\n\"]);\n\n  _templateObject5 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  margin-bottom: 4px;\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: flex-end;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  margin: 10px;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  margin-bottom: 16px;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, Fragment } from 'react';\nimport styled from 'styled-components';\nimport ExchangeInput from './ExchangeInput';\nconst FromContainer = styled.div(_templateObject());\nconst InputContainer = styled.div(_templateObject2());\nconst Bottom = styled.div(_templateObject3());\nconst ErrorBar = styled.div(_templateObject4());\nconst EstimateInfo = styled.div(_templateObject5());\nexport default class ExchangePage extends Component {\n  constructor(props) {\n    super(props);\n\n    const _this$props$plugin$ge = this.props.plugin.getPairs(),\n          _this$props$plugin$ge2 = _slicedToArray(_this$props$plugin$ge, 1),\n          firstPair = _this$props$plugin$ge2[0];\n\n    this.state = {\n      assetA: this.props.plugin.getAsset(firstPair.assetA),\n      assetB: this.props.plugin.getAsset(firstPair.assetB),\n      amount: '',\n      estimate: null,\n      estimateInfo: null,\n      isExchanging: false,\n      error: null\n    };\n  }\n\n  getPair(assetA, assetB) {\n    const _this$props$plugin$ge3 = this.props.plugin.getPairs().filter(_pair => _pair.assetA === assetA.id && _pair.assetB === assetB.id || _pair.assetA === assetB.id && _pair.assetB === assetA.id),\n          _this$props$plugin$ge4 = _slicedToArray(_this$props$plugin$ge3, 1),\n          pair = _this$props$plugin$ge4[0];\n\n    return pair;\n  }\n\n  async runExchange() {\n    const _this$state = this.state,\n          assetA = _this$state.assetA,\n          assetB = _this$state.assetB,\n          amount = _this$state.amount;\n    const actions = this.props.actions;\n    const pair = this.getPair(assetA, assetB);\n\n    if (!pair) {\n      throw new Error('Invalid pair');\n    }\n\n    const exchangeProps = {\n      account: this.props.defaultAccount,\n      ether: amount\n    };\n    this.setState({\n      isExchanging: true,\n      error: null\n    });\n\n    try {\n      const loadingMessage = pair.getLoadingMessage();\n      actions.setLoading(loadingMessage);\n      const response = await (pair.assetA === assetA.id ? pair.exchangeAtoB(exchangeProps) : pair.exchangeBtoA(exchangeProps));\n    } catch (e) {\n      this.setState({\n        error: e.message\n      });\n      actions.setLoading(null);\n      console.error(e);\n    }\n\n    this.setState({\n      isExchanging: false\n    });\n    actions.setLoading(null);\n  }\n\n  async getEstimate(assetA, assetB, amount) {\n    const pair = this.getPair(assetA, assetB);\n\n    if (!pair) {\n      throw new Error('Invalid pair');\n    }\n\n    try {\n      const estimate = await (pair.assetA === assetA.id ? pair.estimateAtoB({\n        ether: amount\n      }) : pair.estimateBtoA({\n        ether: amount\n      }));\n      return estimate;\n    } catch (e) {\n      console.error(e);\n      return {\n        estimate: null,\n        estimateInfo: null\n      };\n    }\n  }\n\n  getPairOptions(asset) {\n    const pairs = this.props.plugin.getPairs();\n    const options = [];\n\n    for (const pair of pairs) {\n      if (pair.assetA === asset.id) {\n        options.push(this.props.plugin.getAsset(pair.assetB));\n      }\n\n      if (pair.assetB === asset.id) {\n        options.push(this.props.plugin.getAsset(pair.assetA));\n      }\n    }\n\n    return options;\n  }\n\n  async update({\n    assetA,\n    assetB,\n    amount\n  }) {\n    const update = {\n      estimate: null,\n      estimateInfo: null\n    };\n\n    if (assetA) {\n      update.assetA = assetA;\n      const options = this.getPairOptions(assetA);\n\n      if (options.length > 0 && options.indexOf(this.state.assetB) === -1) {\n        update.assetB = options[0];\n      }\n    }\n\n    if (assetB) {\n      update.assetB = assetB;\n    }\n\n    if (amount !== undefined) {\n      update.amount = amount;\n    }\n\n    this.setState(update);\n    const start = { ...this.state,\n      ...update\n    };\n\n    if (!start.amount) {\n      return;\n    }\n\n    const _ref = await this.getEstimate(start.assetA, start.assetB, start.amount),\n          estimate = _ref.estimate,\n          estimateInfo = _ref.estimateInfo;\n\n    if (this.state.assetA === start.assetA && this.state.assetB === start.assetB && this.state.amount === start.amount) {\n      this.setState({\n        estimate,\n        estimateInfo: estimateInfo || null\n      });\n    }\n  }\n\n  render() {\n    const burnerComponents = this.props.burnerComponents;\n    const _this$state2 = this.state,\n          assetA = _this$state2.assetA,\n          assetB = _this$state2.assetB,\n          amount = _this$state2.amount,\n          estimate = _this$state2.estimate,\n          isExchanging = _this$state2.isExchanging,\n          error = _this$state2.error,\n          estimateInfo = _this$state2.estimateInfo;\n    const Page = burnerComponents.Page,\n          AssetSelector = burnerComponents.AssetSelector,\n          Button = burnerComponents.Button;\n    const assetBOptions = this.getPairOptions(assetA);\n    const assetsProps = {\n      assets: assetBOptions\n    };\n    return React.createElement(Page, {\n      title: \"Exchange\"\n    }, React.createElement(InputContainer, null, React.createElement(ExchangeInput, {\n      input: amount,\n      inputUnit: assetA.name,\n      onChange: newAmount => this.update({\n        amount: newAmount\n      }),\n      output: estimate ? assetB.getDisplayValue(estimate) : '',\n      outputUnit: assetB.name,\n      disabled: isExchanging\n    }), React.createElement(EstimateInfo, null, estimateInfo)), React.createElement(\"div\", null, React.createElement(FromContainer, null, React.createElement(\"div\", null, \"From:\"), React.createElement(AssetSelector, {\n      selected: assetA,\n      onChange: newAsset => this.update({\n        assetA: newAsset\n      }),\n      disabled: isExchanging\n    })), assetBOptions.length > 0 ? React.createElement(Fragment, null, React.createElement(\"div\", null, \"To:\"), React.createElement(AssetSelector, Object.assign({\n      selected: assetB,\n      onChange: newAsset => this.update({\n        assetB: newAsset\n      }),\n      disabled: isExchanging\n    }, assetsProps))) : React.createElement(\"div\", null, \"No exchanges available for \", assetA.name)), React.createElement(Bottom, null, React.createElement(ErrorBar, null, error), !isExchanging && React.createElement(Button, {\n      onClick: () => this.runExchange(),\n      disabled: isExchanging || assetBOptions.length === 0\n    }, \"Exchange\")));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}