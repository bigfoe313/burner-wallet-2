{"ast":null,"code":"const Web3 = require('web3');\n\nconst _require = require('web3-utils'),\n      toBN = _require.toBN;\n\nconst Signer = require('./Signer');\n\nclass TempSigner extends Signer {\n  constructor() {\n    super({\n      id: 'temp'\n    });\n    this.account = null;\n  }\n\n  getAccounts() {\n    return this.account ? [this.account.address] : [];\n  }\n\n  isAvailable() {\n    return !!this.account;\n  }\n\n  async signTx(tx) {\n    const _tx = { ...tx,\n      // Workaround for https://github.com/ethereumjs/ethereumjs-tx/pull/195\n      common: {\n        customChain: {\n          chainId: tx.chainId,\n          networkId: tx.chainId\n        },\n        hardfork: 'istanbul'\n      }\n    };\n\n    const _ref = await this.account.signTransaction(_tx),\n          rawTransaction = _ref.rawTransaction;\n\n    _tx.signedTransaction = rawTransaction;\n    return _tx;\n  }\n\n  async signMsg(msg) {\n    return this.account.sign(msg).signature;\n  }\n\n  permissions() {\n    return ['enable', 'disable'];\n  }\n\n  invoke(action, newPK) {\n    switch (action) {\n      case 'disable':\n        this.account = null;\n        this.events.emit('accountChange');\n        return;\n\n      case 'enable':\n        this._generateAccountFromPK(newPK);\n\n        return this.account.address;\n\n      case 'getAddress':\n        return this.account && this.account.address;\n\n      default:\n        throw new Error(\"Unknown action \".concat(action));\n    }\n  }\n\n  _generateAccountFromPK(privateKey) {\n    this.account = new Web3().eth.accounts.privateKeyToAccount(privateKey);\n    this.events.emit('accountChange');\n  }\n\n}\n\nmodule.exports = TempSigner;","map":null,"metadata":{},"sourceType":"script"}