{"ast":null,"code":"var _slicedToArray = require(\"/home/aforbers/burner-wallet-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst _require = require('web3-utils'),\n      toBN = _require.toBN,\n      toChecksumAddress = _require.toChecksumAddress,\n      padLeft = _require.padLeft,\n      hexToNumberString = _require.hexToNumberString;\n\nconst Asset = require('./Asset');\n\nconst POLL_INTERVAL = 2500;\nconst TRANSFER_TOPIC = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef';\n\nclass NativeAsset extends Asset {\n  constructor({\n    pollInterval = POLL_INTERVAL,\n    ...props\n  }) {\n    super({ ...props,\n      type: 'native'\n    });\n    this._pollInterval = pollInterval;\n  }\n\n  getBalance(account) {\n    return this.getWeb3().eth.getBalance(account);\n  }\n\n  supportsMessages() {\n    return true;\n  }\n\n  startWatchingAddress(address) {\n    let block = 0;\n    let balance = 0;\n    return this.poll(async () => {\n      const web3 = this.getWeb3();\n\n      const _ref = await Promise.all([web3.eth.getBlockNumber(), web3.eth.getBalance(address)]),\n            _ref2 = _slicedToArray(_ref, 2),\n            currentBlock = _ref2[0],\n            currentBalance = _ref2[1];\n\n      if (block !== 0 && balance !== currentBalance) {\n        const offsetBalance = web3.utils.toBN(balance).add(web3.utils.toBN(this.getBalanceDelta(address, block + 1, currentBlock)));\n\n        if (offsetBalance !== currentBalance) {\n          await this.scanBlocks(address, block + 1, currentBlock);\n        }\n      }\n\n      block = currentBlock;\n      balance = currentBalance;\n    }, this._pollInterval);\n  }\n\n  async scanBlocks(address, startBlock, toBlock) {\n    const _address = address.toLowerCase();\n\n    const web3 = this.getWeb3();\n    const logs = await web3.eth.getPastLogs({\n      fromBlock: startBlock,\n      toBlock,\n      address,\n      topics: [TRANSFER_TOPIC]\n    });\n\n    for (let log of logs) {\n      const parsedLog = this.getTransferLog([log]);\n      this.core.addHistoryEvent({\n        asset: this.id,\n        assetName: this.name,\n        type: 'send',\n        from: parsedLog.args.from,\n        to: parsedLog.args.to,\n        value: parsedLog.args.value,\n        displayValue: this.getDisplayValue(parsedLog.args.value),\n        message: null,\n        timestamp: await this._getBlockTimestamp(parsedLog.blockNumber)\n      });\n    }\n\n    const blockNums = [];\n\n    for (let blockNum = startBlock; blockNum <= toBlock; blockNum += 1) {\n      blockNums.push(blockNum);\n    }\n\n    await Promise.all(blockNums.map(async blockNum => {\n      const block = await web3.eth.getBlock(blockNum);\n      await Promise.all(block.transactions.map(async txHash => {\n        const tx = await web3.eth.getTransaction(txHash);\n\n        if (tx.value !== '0' && tx.to.toLowerCase() === _address) {\n          this.core.addHistoryEvent({\n            id: tx.hash,\n            asset: this.id,\n            type: 'send',\n            value: tx.value,\n            from: tx.from,\n            to: tx.to,\n            message: tx.input.length > 2 ? web3.utils.toUtf8(tx.input) : null,\n            tx: tx.hash,\n            timestamp: block.timestamp\n          });\n        }\n      }));\n    }));\n  }\n\n  getBalanceDelta(address, startBlock, endBlock) {\n    const web3 = this.getWeb3();\n    return this.core.getHistoryEvents({\n      asset: this.id,\n      fromBlock: startBlock,\n      toBlock: endBlock\n    }).filter(event => event.to === address || event.from === address).reduce((reducer, event) => event.to === address ? web3.utils.toBN(reducer).add(web3.utils.toBN(event.value)) : web3.utils.toBN(reducer).sub(web3.utils.toBN(event.value)), '0');\n  }\n\n  async getSendFee(from, to) {\n    const web3 = this.getWeb3();\n\n    const _ref3 = await Promise.all([web3.eth.estimateGas({\n      from,\n      to,\n      value: '1'\n    }), web3.eth.getGasPrice()]),\n          _ref4 = _slicedToArray(_ref3, 2),\n          gas = _ref4[0],\n          gasPrice = _ref4[1];\n\n    return toBN(gas).mul(toBN(gasPrice)).toString();\n  }\n\n  async _send({\n    message,\n    ...params\n  }) {\n    const web3 = this.getWeb3();\n    const data = message ? web3.utils.fromUtf8(message) : undefined;\n    const receipt = await web3.eth.sendTransaction({\n      data,\n      ...params\n    });\n    return { ...receipt,\n      txHash: receipt.transactionHash,\n      id: receipt.transactionHash\n    };\n  }\n\n  async getTx(txHash) {\n    const web3 = this.getWeb3();\n\n    const _ref5 = await Promise.all([web3.eth.getTransaction(txHash), web3.eth.getTransactionReceipt(txHash)]),\n          _ref6 = _slicedToArray(_ref5, 2),\n          tx = _ref6[0],\n          receipt = _ref6[1];\n\n    if (!tx || !receipt) {\n      return null;\n    }\n\n    if (receipt.logs.length > 0 && this.getTransferLog(receipt.logs)) {\n      const log = this.getTransferLog(receipt.logs);\n      return {\n        asset: this.id,\n        assetName: this.name,\n        from: log.args.from,\n        to: log.args.to,\n        value: log.args.value,\n        displayValue: this.getDisplayValue(log.args.value),\n        message: null,\n        timestamp: await this._getBlockTimestamp(log.blockNumber)\n      };\n    }\n\n    return {\n      asset: this.id,\n      assetName: this.name,\n      from: tx.from,\n      to: tx.to,\n      value: tx.value,\n      displayValue: this.getDisplayValue(tx.value),\n      message: tx.input.length > 2 ? web3.utils.toUtf8(tx.input) : null,\n      timestamp: await this._getBlockTimestamp(tx.blockNumber)\n    };\n  }\n\n  getTransferLog(logs) {\n    for (const log of logs) {\n      if (log.topics[0] === TRANSFER_TOPIC && (log.address === toChecksumAddress(log.topics[1].substr(26)) || log.address === toChecksumAddress(log.topics[2].substr(26)))) {\n        return { ...log,\n          args: {\n            from: toChecksumAddress(log.topics[1].substr(26)),\n            to: toChecksumAddress(log.topics[2].substr(26)),\n            value: hexToNumberString(log.data)\n          }\n        };\n      }\n    }\n\n    return null;\n  }\n\n}\n\nmodule.exports = NativeAsset;","map":null,"metadata":{},"sourceType":"script"}